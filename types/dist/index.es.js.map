{"version":3,"file":"index.es.js","sources":["../src/abis/erc20.ts","../src/amount.ts","../src/network.ts","../src/thorchain.ts","../src/transactions.ts","../src/wallet.ts"],"sourcesContent":["export default [\n  { inputs: [], stateMutability: 'nonpayable', type: 'constructor' },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: 'address', name: 'owner', type: 'address' },\n      { indexed: true, internalType: 'address', name: 'spender', type: 'address' },\n      { indexed: false, internalType: 'uint256', name: 'value', type: 'uint256' },\n    ],\n    name: 'Approval',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: 'address', name: 'from', type: 'address' },\n      { indexed: true, internalType: 'address', name: 'to', type: 'address' },\n      { indexed: false, internalType: 'uint256', name: 'value', type: 'uint256' },\n    ],\n    name: 'Transfer',\n    type: 'event',\n  },\n  {\n    inputs: [\n      { internalType: 'address', name: '', type: 'address' },\n      { internalType: 'address', name: '', type: 'address' },\n    ],\n    name: 'allowance',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { internalType: 'address', name: 'spender', type: 'address' },\n      { internalType: 'uint256', name: 'value', type: 'uint256' },\n    ],\n    name: 'approve',\n    outputs: [{ internalType: 'bool', name: 'success', type: 'bool' }],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [{ internalType: 'address', name: '', type: 'address' }],\n    name: 'balanceOf',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'decimals',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'name',\n    outputs: [{ internalType: 'string', name: '', type: 'string' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'symbol',\n    outputs: [{ internalType: 'string', name: '', type: 'string' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { internalType: 'address', name: 'to', type: 'address' },\n      { internalType: 'uint256', name: 'value', type: 'uint256' },\n    ],\n    name: 'transfer',\n    outputs: [{ internalType: 'bool', name: 'success', type: 'bool' }],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { internalType: 'address', name: 'from', type: 'address' },\n      { internalType: 'address', name: 'to', type: 'address' },\n      { internalType: 'uint256', name: 'value', type: 'uint256' },\n    ],\n    name: 'transferFrom',\n    outputs: [{ internalType: 'bool', name: 'success', type: 'bool' }],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n];\n","import { BigNumber, FixedNumber } from '@ethersproject/bignumber';\n\nexport enum Denomination {\n  /**\n   * values for asset amounts in base units (no decimal)\n   */\n  Base = 'BASE',\n  /**\n   * values of asset amounts (w/ decimal)\n   */\n  Asset = 'ASSET',\n}\n\ntype AmountWithDenom<T, U = BigNumber | FixedNumber> = T extends Denomination\n  ? {\n      type: T;\n      amount: () => U;\n      plus: (value: U | AmountWithDenom<T, U>, decimal?: number) => AmountWithDenom<T, U>;\n      minus: (value: U | AmountWithDenom<T, U>, decimal?: number) => AmountWithDenom<T, U>;\n      times: (value: U | AmountWithDenom<T, U>, decimal?: number) => AmountWithDenom<T, U>;\n      div: (value: U | AmountWithDenom<T, U>, decimal?: number) => AmountWithDenom<T, U>;\n      gt: (value: U | AmountWithDenom<T, U>) => boolean;\n      gte: (value: U | AmountWithDenom<T, U>) => boolean;\n      lt: (value: U | AmountWithDenom<T, U>) => boolean;\n      lte: (value: U | AmountWithDenom<T, U>) => boolean;\n      eq: (value: U | AmountWithDenom<T, U>) => boolean;\n      decimal: number;\n    }\n  : never;\n\nexport type AmountWithBaseDenom = AmountWithDenom<Denomination.Base, BigNumber>;\nexport type AmountWithAssetDenom = AmountWithDenom<Denomination.Asset, FixedNumber>;\n","export enum Chain {\n  Avalanche = 'AVAX',\n  Binance = 'BNB',\n  Bitcoin = 'BTC',\n  Ethereum = 'ETH',\n  THORChain = 'THOR',\n  Cosmos = 'GAIA',\n  BitcoinCash = 'BCH',\n  Litecoin = 'LTC',\n  Doge = 'DOGE',\n  Solana = 'SOL',\n}\n\nexport const SUPPORTED_CHAINS = [\n  Chain.THORChain,\n  Chain.Avalanche,\n  Chain.Bitcoin,\n  Chain.Ethereum,\n  Chain.Binance,\n  Chain.Cosmos,\n  Chain.Doge,\n  Chain.BitcoinCash,\n  Chain.Litecoin,\n  Chain.Solana,\n] as const;\n\nexport type SupportedChain = typeof SUPPORTED_CHAINS[number];\n\nexport type SupportedChainsArray = typeof SUPPORTED_CHAINS;\n\nexport enum ContractAddress {\n  AVAX = '0x0000000000000000000000000000000000000000',\n  ETH = '0x0000000000000000000000000000000000000000',\n  USDC_SPL_MINT_ADDRESS = 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n  USDC_SPL_TESTNET_MINT_ADDRESS = '6TEqT62wq5mbKQPubX9eFeNJRYXRJd79Hk51pZk7nZrB',\n}\n\nexport enum Network {\n  Mainnet = 'mainnet',\n  Testnet = 'testnet',\n}\n\nexport enum NetworkId {\n  Ethereum = 60,\n  Binance = 714,\n  THORChain = 931,\n}\n\nexport enum ChainId {\n  Avalanche = '43114',\n  AvalancheHex = '0xa86a',\n  Binance = 'Binance-Chain-Tigris',\n  Bitcoin = 'bitcoin',\n  Bitcoincash = 'bitcoincash',\n  Cosmos = 'cosmos',\n  DogeCoin = 'dogecoin',\n  Ethereum = '1',\n  EthereumHex = '0x1',\n  Litecoin = 'litecoin',\n  Thorchain = 'thorchain',\n}\n\nexport enum AssetSymbol {\n  AVAX = 'AVAX',\n  BNB = 'BNB',\n  BTC = 'BTC',\n  ETH = 'ETH',\n  THOR = 'THOR',\n  GAIA = 'GAIA',\n  BCH = 'BCH',\n  LTC = 'LTC',\n  RUNE = 'RUNE',\n  'RUNE-67C' = 'RUNE-67C',\n  'RUNE-B1A' = 'RUNE-B1A',\n  DOGE = 'DOGE',\n  SOL = 'SOL',\n  ATOM = 'ATOM',\n  MUON = 'MUON',\n  RUNE_ERC_20 = 'RUNE-0x3155ba85d5f96b2d030a4966af206230e46849cb',\n  RUNE_ERC_20_TESTNET = 'RUNE-0xd601c6A3a36721320573885A8d8420746dA3d7A0',\n}\n\nexport const ChainToChainId = {\n  [Chain.Avalanche]: ChainId.Avalanche,\n  [Chain.Binance]: ChainId.Binance,\n  [Chain.Bitcoin]: ChainId.Bitcoin,\n  [Chain.BitcoinCash]: ChainId.Bitcoincash,\n  [Chain.Cosmos]: ChainId.Cosmos,\n  [Chain.Doge]: ChainId.DogeCoin,\n  [Chain.Ethereum]: ChainId.Ethereum,\n  [Chain.Litecoin]: ChainId.Litecoin,\n  [Chain.THORChain]: ChainId.Thorchain,\n  [Chain.Solana]: undefined,\n};\n\nexport interface ResourceWorkerAllGasPricesResponse {\n  ok: boolean;\n  result: {\n    chainId: ChainId;\n    asset: string;\n    gas: number;\n    units: 'tor' | 'gwei' | 'wei' | 'sats' | 'uatom';\n  }[];\n}\n","export type GetAddressAndPubKeyResponse = {\n  bech32_address: string;\n  compressed_pk: any;\n  error_message: string;\n  return_code: number;\n};\n\nexport type Signature = {\n  pub_key: {\n    type: string;\n    value: string;\n  };\n  sequence: string;\n  signature: string;\n};\n\nexport enum ErrorCode {\n  NoError = 0x9000,\n}\n","import { BigNumberish } from '@ethersproject/bignumber';\n\nimport { AmountWithBaseDenom } from './amount.js';\nimport { Address, Asset } from './commonTypes.js';\n\nexport enum TxType {\n  Transfer = 'transfer',\n  Unknown = 'unknown',\n}\n\nexport type ClientTxParams = {\n  walletIndex?: number;\n  asset?: Asset;\n  amount: AmountWithBaseDenom;\n  recipient: string;\n  memo?: string;\n};\n\nexport type TxTo = {\n  to: string; // address\n  amount: AmountWithBaseDenom; // amount\n  asset?: Asset; // asset\n};\n\nexport type TxFrom = {\n  from: string; // address or tx id\n  amount: AmountWithBaseDenom; // amount\n  asset?: Asset; // asset\n};\n\nexport type Tx = {\n  asset: Asset; // asset\n  from: TxFrom[]; // list of \"from\" txs. BNC will have one `TxFrom` only, `BTC` might have many transactions going \"in\" (based on UTXO)\n  to: TxTo[]; // list of \"to\" transactions. BNC will have one `TxTo` only, `BTC` might have many transactions going \"out\" (based on UTXO)\n  date: Date; // timestamp of tx\n  type: TxType; // type\n  hash: string; // Tx hash\n};\n\nexport type TxParams = {\n  walletIndex?: number; // send from this HD index\n  asset?: Asset;\n  amount: AmountWithBaseDenom;\n  recipient: Address;\n  memo?: string; // optional memo to pass\n};\n\nexport type TxsPage = {\n  total: number;\n  txs: Tx[];\n};\n\nexport type TxHistoryParams = {\n  address: string; // Address to get history for\n  offset?: number; // Optional Offset\n  limit?: number; // Optional Limit of transactions\n  startTime?: Date; // Optional start time\n  asset?: string; // Optional asset. Result transactions will be filtered by this asset\n};\n\ntype Coin = {\n  asset: Asset;\n  amount: AmountWithBaseDenom;\n};\n\nexport type MultiTransfer = {\n  to: Address;\n  coins: Coin[];\n};\n\nexport type MultiSendParams = {\n  walletIndex?: number;\n  transactions: MultiTransfer[];\n  memo?: string;\n};\n\nexport type EIP1559TxParams<T = BigNumberish> = {\n  nonce?: number;\n  from?: string;\n  to?: string;\n  data?: string;\n  value?: T;\n  gasLimit?: T;\n  maxFeePerGas?: T;\n  maxPriorityFeePerGas?: T;\n};\n","import { AmountWithBaseDenom } from './amount.js';\nimport { Asset } from './commonTypes.js';\nimport { Chain } from './network.js';\n\nexport const MOCK_PHRASE =\n  'image rally need wedding health address purse army antenna leopard sea gain';\n\nexport enum FeeOption {\n  Average = 'average',\n  Fast = 'fast',\n  Fastest = 'fastest',\n}\n\nexport enum FeeType {\n  FlatFee = 'base',\n  PerByte = 'byte',\n}\n\nexport type Balance = {\n  asset: Asset;\n  amount: AmountWithBaseDenom;\n};\n\nexport type Fees = Record<FeeOption, AmountWithBaseDenom> & {\n  type?: FeeType;\n};\nexport type FeeRate = number;\nexport type FeeRates = Record<FeeOption, FeeRate>;\n\n// ledger supported chains\nexport const LEDGER_SUPPORTED_CHAINS = [\n  Chain.THORChain,\n  Chain.Ethereum,\n  Chain.Binance,\n  Chain.Bitcoin,\n  Chain.BitcoinCash,\n  Chain.Doge,\n  Chain.Litecoin,\n  Chain.Cosmos,\n] as const;\n\nexport enum WalletOption {\n  'KEYSTORE' = 'KEYSTORE',\n  'XDEFI' = 'XDEFI',\n  'METAMASK' = 'METAMASK',\n  'TRUSTWALLET' = 'TRUSTWALLET',\n  'LEDGER' = 'LEDGER',\n  'PHANTOM' = 'PHANTOM',\n  'KEPLR' = 'KEPLR',\n}\n\nexport type Keystore = {\n  crypto: {\n    cipher: string;\n    ciphertext: string;\n    cipherparams: {\n      iv: string;\n    };\n    kdf: string;\n    kdfparams: {\n      prf: string;\n      dklen: number;\n      salt: string;\n      c: number;\n    };\n    mac: string;\n  };\n  id: string;\n  version: number;\n  meta: string;\n};\n"],"names":["erc20","Denomination","Chain","SUPPORTED_CHAINS","ContractAddress","Network","NetworkId","ChainId","AssetSymbol","ChainToChainId","ErrorCode","TxType","MOCK_PHRASE","FeeOption","FeeType","LEDGER_SUPPORTED_CHAINS","WalletOption"],"mappings":"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"}