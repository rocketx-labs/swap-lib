{"version":3,"file":"index.cjs","sources":["../../types/dist/index.es.js","../src/helpers/asset.ts","../src/entities/amount.ts","../src/helpers/liquidity.ts","../src/helpers/memo.ts","../src/helpers/network.ts","../src/helpers/thorname.ts","../src/entities/asset.ts","../src/entities/price.ts","../src/entities/assetAmount.ts","../src/entities/pool.ts"],"sourcesContent":["var l = Object.defineProperty;\nvar m = (e, n, t) => n in e ? l(e, n, { enumerable: !0, configurable: !0, writable: !0, value: t }) : e[n] = t;\nvar a = (e, n, t) => (m(e, typeof n != \"symbol\" ? n + \"\" : n, t), t);\nconst O = [\n  { inputs: [], stateMutability: \"nonpayable\", type: \"constructor\" },\n  {\n    anonymous: !1,\n    inputs: [\n      { indexed: !0, internalType: \"address\", name: \"owner\", type: \"address\" },\n      { indexed: !0, internalType: \"address\", name: \"spender\", type: \"address\" },\n      { indexed: !1, internalType: \"uint256\", name: \"value\", type: \"uint256\" }\n    ],\n    name: \"Approval\",\n    type: \"event\"\n  },\n  {\n    anonymous: !1,\n    inputs: [\n      { indexed: !0, internalType: \"address\", name: \"from\", type: \"address\" },\n      { indexed: !0, internalType: \"address\", name: \"to\", type: \"address\" },\n      { indexed: !1, internalType: \"uint256\", name: \"value\", type: \"uint256\" }\n    ],\n    name: \"Transfer\",\n    type: \"event\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"\", type: \"address\" },\n      { internalType: \"address\", name: \"\", type: \"address\" }\n    ],\n    name: \"allowance\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"spender\", type: \"address\" },\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" }\n    ],\n    name: \"approve\",\n    outputs: [{ internalType: \"bool\", name: \"success\", type: \"bool\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    name: \"balanceOf\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" }\n    ],\n    name: \"transfer\",\n    outputs: [{ internalType: \"bool\", name: \"success\", type: \"bool\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"from\", type: \"address\" },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" }\n    ],\n    name: \"transferFrom\",\n    outputs: [{ internalType: \"bool\", name: \"success\", type: \"bool\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }\n], U = [\n  {\n    inputs: [{ internalType: \"address\", name: \"rune\", type: \"address\" }],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\"\n  },\n  {\n    anonymous: !1,\n    inputs: [\n      { indexed: !0, internalType: \"address\", name: \"to\", type: \"address\" },\n      { indexed: !0, internalType: \"address\", name: \"asset\", type: \"address\" },\n      { indexed: !1, internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { indexed: !1, internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"Deposit\",\n    type: \"event\"\n  },\n  {\n    anonymous: !1,\n    inputs: [\n      { indexed: !0, internalType: \"address\", name: \"oldVault\", type: \"address\" },\n      { indexed: !0, internalType: \"address\", name: \"newVault\", type: \"address\" },\n      { indexed: !1, internalType: \"address\", name: \"asset\", type: \"address\" },\n      { indexed: !1, internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { indexed: !1, internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"TransferAllowance\",\n    type: \"event\"\n  },\n  {\n    anonymous: !1,\n    inputs: [\n      { indexed: !0, internalType: \"address\", name: \"vault\", type: \"address\" },\n      { indexed: !0, internalType: \"address\", name: \"to\", type: \"address\" },\n      { indexed: !1, internalType: \"address\", name: \"asset\", type: \"address\" },\n      { indexed: !1, internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { indexed: !1, internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"TransferOut\",\n    type: \"event\"\n  },\n  {\n    anonymous: !1,\n    inputs: [\n      { indexed: !0, internalType: \"address\", name: \"vault\", type: \"address\" },\n      { indexed: !1, internalType: \"address\", name: \"target\", type: \"address\" },\n      { indexed: !1, internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { indexed: !1, internalType: \"address\", name: \"finalAsset\", type: \"address\" },\n      { indexed: !1, internalType: \"address\", name: \"to\", type: \"address\" },\n      { indexed: !1, internalType: \"uint256\", name: \"amountOutMin\", type: \"uint256\" },\n      { indexed: !1, internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"TransferOutAndCall\",\n    type: \"event\"\n  },\n  {\n    anonymous: !1,\n    inputs: [\n      { indexed: !0, internalType: \"address\", name: \"oldVault\", type: \"address\" },\n      { indexed: !0, internalType: \"address\", name: \"newVault\", type: \"address\" },\n      {\n        components: [\n          { internalType: \"address\", name: \"asset\", type: \"address\" },\n          { internalType: \"uint256\", name: \"amount\", type: \"uint256\" }\n        ],\n        indexed: !1,\n        internalType: \"struct THORChain_Router.Coin[]\",\n        name: \"coins\",\n        type: \"tuple[]\"\n      },\n      { indexed: !1, internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"VaultTransfer\",\n    type: \"event\"\n  },\n  {\n    inputs: [],\n    name: \"RUNE\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address payable\", name: \"vault\", type: \"address\" },\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"deposit\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address payable\", name: \"vault\", type: \"address\" },\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"string\", name: \"memo\", type: \"string\" },\n      { internalType: \"uint256\", name: \"expiration\", type: \"uint256\" }\n    ],\n    name: \"depositWithExpiry\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"router\", type: \"address\" },\n      { internalType: \"address payable\", name: \"asgard\", type: \"address\" },\n      {\n        components: [\n          { internalType: \"address\", name: \"asset\", type: \"address\" },\n          { internalType: \"uint256\", name: \"amount\", type: \"uint256\" }\n        ],\n        internalType: \"struct THORChain_Router.Coin[]\",\n        name: \"coins\",\n        type: \"tuple[]\"\n      },\n      { internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"returnVaultAssets\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"router\", type: \"address\" },\n      { internalType: \"address\", name: \"newVault\", type: \"address\" },\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"transferAllowance\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address payable\", name: \"to\", type: \"address\" },\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"transferOut\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address payable\", name: \"aggregator\", type: \"address\" },\n      { internalType: \"address\", name: \"finalToken\", type: \"address\" },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amountOutMin\", type: \"uint256\" },\n      { internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"transferOutAndCall\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"vault\", type: \"address\" },\n      { internalType: \"address\", name: \"token\", type: \"address\" }\n    ],\n    name: \"vaultAllowance\",\n    outputs: [{ internalType: \"uint256\", name: \"amount\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }\n], G = [\n  { inputs: [], stateMutability: \"nonpayable\", type: \"constructor\" },\n  {\n    anonymous: !1,\n    inputs: [\n      { indexed: !0, internalType: \"address\", name: \"to\", type: \"address\" },\n      { indexed: !0, internalType: \"address\", name: \"asset\", type: \"address\" },\n      { indexed: !1, internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { indexed: !1, internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"Deposit\",\n    type: \"event\"\n  },\n  {\n    anonymous: !1,\n    inputs: [\n      { indexed: !0, internalType: \"address\", name: \"oldVault\", type: \"address\" },\n      { indexed: !0, internalType: \"address\", name: \"newVault\", type: \"address\" },\n      { indexed: !1, internalType: \"address\", name: \"asset\", type: \"address\" },\n      { indexed: !1, internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { indexed: !1, internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"TransferAllowance\",\n    type: \"event\"\n  },\n  {\n    anonymous: !1,\n    inputs: [\n      { indexed: !0, internalType: \"address\", name: \"vault\", type: \"address\" },\n      { indexed: !0, internalType: \"address\", name: \"to\", type: \"address\" },\n      { indexed: !1, internalType: \"address\", name: \"asset\", type: \"address\" },\n      { indexed: !1, internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { indexed: !1, internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"TransferOut\",\n    type: \"event\"\n  },\n  {\n    anonymous: !1,\n    inputs: [\n      { indexed: !0, internalType: \"address\", name: \"vault\", type: \"address\" },\n      { indexed: !1, internalType: \"address\", name: \"target\", type: \"address\" },\n      { indexed: !1, internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { indexed: !1, internalType: \"address\", name: \"finalAsset\", type: \"address\" },\n      { indexed: !1, internalType: \"address\", name: \"to\", type: \"address\" },\n      { indexed: !1, internalType: \"uint256\", name: \"amountOutMin\", type: \"uint256\" },\n      { indexed: !1, internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"TransferOutAndCall\",\n    type: \"event\"\n  },\n  {\n    anonymous: !1,\n    inputs: [\n      { indexed: !0, internalType: \"address\", name: \"oldVault\", type: \"address\" },\n      { indexed: !0, internalType: \"address\", name: \"newVault\", type: \"address\" },\n      {\n        components: [\n          { internalType: \"address\", name: \"asset\", type: \"address\" },\n          { internalType: \"uint256\", name: \"amount\", type: \"uint256\" }\n        ],\n        indexed: !1,\n        internalType: \"struct AvaxRouter.Coin[]\",\n        name: \"coins\",\n        type: \"tuple[]\"\n      },\n      { indexed: !1, internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"VaultTransfer\",\n    type: \"event\"\n  },\n  {\n    inputs: [\n      { internalType: \"address payable\", name: \"vault\", type: \"address\" },\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"deposit\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address payable\", name: \"vault\", type: \"address\" },\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"string\", name: \"memo\", type: \"string\" },\n      { internalType: \"uint256\", name: \"expiration\", type: \"uint256\" }\n    ],\n    name: \"depositWithExpiry\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"router\", type: \"address\" },\n      { internalType: \"address payable\", name: \"asgard\", type: \"address\" },\n      {\n        components: [\n          { internalType: \"address\", name: \"asset\", type: \"address\" },\n          { internalType: \"uint256\", name: \"amount\", type: \"uint256\" }\n        ],\n        internalType: \"struct AvaxRouter.Coin[]\",\n        name: \"coins\",\n        type: \"tuple[]\"\n      },\n      { internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"returnVaultAssets\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"router\", type: \"address\" },\n      { internalType: \"address\", name: \"newVault\", type: \"address\" },\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"transferAllowance\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address payable\", name: \"to\", type: \"address\" },\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"transferOut\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address payable\", name: \"target\", type: \"address\" },\n      { internalType: \"address\", name: \"finalToken\", type: \"address\" },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amountOutMin\", type: \"uint256\" },\n      { internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"transferOutAndCall\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"vault\", type: \"address\" },\n      { internalType: \"address\", name: \"token\", type: \"address\" }\n    ],\n    name: \"vaultAllowance\",\n    outputs: [{ internalType: \"uint256\", name: \"amount\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }\n];\nvar A = /* @__PURE__ */ ((e) => (e.Base = \"BASE\", e.Asset = \"ASSET\", e))(A || {}), c = /* @__PURE__ */ ((e) => (e.THOR = \"THOR\", e.RUNE = \"RUNE\", e[\"RUNE-67C\"] = \"RUNE-67C\", e[\"RUNE-B1A\"] = \"RUNE-B1A\", e.ATOM = \"ATOM\", e.MUON = \"MUON\", e.USDC = \"USDC\", e))(c || {}), i = /* @__PURE__ */ ((e) => (e.VALIDATION_ERROR = \"VALIDATION_ERROR\", e.REQUEST_PARAMETER_ERROR = \"REQUEST_PARAMETER_ERROR\", e.RESPONSE_PARSING_ERROR = \"RESPONSE_PARSING_ERROR\", e.UNHANDLED_ERROR = \"UNHANDLED_ERROR\", e.INCOMPATIBLE_ASSETS_OPERATIONS = \"INCOMPATIBLE_ASSETS_OPERATIONS\", e.SERVICE_UNAVAILABLE = \"SERVICE_UNAVAILABLE\", e.UNSUPPORTED_ASSET = \"UNSUPPORTED_ASSET\", e.MISSING_INBOUND_INFO = \"MISSING_INBOUND_INFO\", e.QUOTE_FETCHING_ERROR = \"QUOTE_FETCHING_ERROR\", e.AIRDROP_ERROR = \"AIRDROP_ERROR\", e))(i || {}), S = /* @__PURE__ */ ((e) => (e.HEALTH_CONTROLLER = \"1000\", e.LIQUIDITY_CONTROLLER = \"1001\", e.PROVIDER_CONTROLLER = \"1002\", e.QUOTE_CONTROLLER = \"1003\", e.SWAP_CONTROLLER = \"1004\", e.UTIL_CONTROLLER = \"1005\", e.AIRDROP_CONTROLLER = \"1006\", e.PROVIDER_ENTITY = \"2000\", e.THORCHAIN_PROVIDER = \"3000\", e.PROVIDER_UTIL = \"4000\", e.AIRDROP_UTIL = \"6000\", e))(S || {}), N = /* @__PURE__ */ ((e) => (e.INVALID_INPUT_PARAMETERS = \"1000\", e.UNKNOWN_PROVIDERS = \"1001\", e.CANNOT_FIND_INBOUND_ADDRESS = \"1002\", e.NO_INBOUND_ADDRESSES = \"1003\", e.CHAIN_HALTED_OR_UNSUPPORTED = \"1004\", e.MISSING_INPUT_PARAMETER = \"1005\", e.SELL_AMOUNT_MUST_BE_POSITIVE_INTEGER = \"2000\", e.SELL_BUY_ASSETS_ARE_THE_SAME = \"2001\", e.MISSING_SOURCE_ADDRESS_FOR_SYNTH = \"2002\", e.AFF_ADDRESS_AND_BPS_OR_NEITHER = \"2003\", e.AFF_ADDRESS_TOO_LONG = \"2004\", e.AFF_BPS_INTEGER_0_100 = \"2005\", e.SOURCE_ADDRESS_INVALID_FOR_SELL_CHAIN = \"2006\", e.DESTINATION_ADDRESS_INVALID_FOR_BUY_CHAIN = \"2007\", e.PREFERRED_PROFVIDER_NOT_SUPPORTED = \"2008\", e.DESTINATION_ADDRESS_SMART_CONTRACT = \"2009\", e.INVALID_PROVIDER = \"2100\", e.MISSING_CROSS_CHAIN_PROVIDER = \"2101\", e.MISSING_AVAX_PROVIDER = \"2102\", e.MISSING_BSC_PROVIDER = \"2103\", e.MISSING_ETH_PROVIDER = \"2104\", e.INVALID_PROVIDER_FOR_SWAP_OUT = \"2105\", e.INVALID_CHAIN = \"2200\", e.INVALID_ASSET = \"2201\", e.INVALID_ASSET_IDENTIFIER = \"2202\", e.UNSUPPORTED_ASSET = \"2203\", e.UNSUPPORTED_CHAIN = \"2204\", e.UNSUPPORTED_ASSET_FOR_SWAPOUT = \"2205\", e.THORNODE_QUOTE_GENERIC_ERROR = \"3000\", e.NOT_ENOUGH_SYNTH_BALANCE = \"3001\", e.SYNTH_MINTING_CAP_REACHED = \"3002\", e.ADDRESS_NOT_WHITELISTED = \"6000\", e.ADDRESS_ALREADY_CLAIMED = \"6001\", e))(N || {});\nclass p extends Error {\n  constructor({\n    status: t,\n    module: d,\n    code: u,\n    message: s,\n    type: r,\n    options: { shouldLog: y, shouldThrow: o, shouldTrace: T } = {}\n  }) {\n    super(s);\n    a(this, \"status\");\n    a(this, \"module\");\n    a(this, \"code\");\n    a(this, \"type\");\n    a(this, \"message\");\n    a(this, \"stack\");\n    a(this, \"options\");\n    this.status = t, this.module = d, this.message = s, this.code = u, this.type = r || i.UNHANDLED_ERROR, this.options = {\n      shouldLog: y || !0,\n      shouldTrace: T || !0,\n      shouldThrow: o || !0\n    }, this.options.shouldTrace && Error.captureStackTrace(this);\n  }\n  static fromErrorInfo(t) {\n    return new p(t);\n  }\n  identifier() {\n    return `${this.module}-${this.code}`;\n  }\n  handle() {\n    const t = `[${this.type}.${this.module}]: ${this.message}`;\n    if (this.options.shouldLog && console.error(t, `\n`, this.stack || \"\"), this.options.shouldThrow)\n      throw Error(t, { cause: this.stack });\n    return this.returnErrorInfo();\n  }\n  returnErrorInfo() {\n    return { ...this, identifier: this.identifier() };\n  }\n}\nvar E = /* @__PURE__ */ ((e) => (e.Avalanche = \"AVAX\", e.Binance = \"BNB\", e.BinanceSmartChain = \"BSC\", e.Bitcoin = \"BTC\", e.BitcoinCash = \"BCH\", e.Cosmos = \"GAIA\", e.Doge = \"DOGE\", e.Ethereum = \"ETH\", e.Litecoin = \"LTC\", e.THORChain = \"THOR\", e))(E || {});\nconst w = [\n  \"THOR\",\n  \"AVAX\",\n  \"BTC\",\n  \"ETH\",\n  \"BNB\",\n  \"BSC\",\n  \"GAIA\",\n  \"DOGE\",\n  \"BCH\",\n  \"LTC\"\n  /* Litecoin */\n];\nvar I = /* @__PURE__ */ ((e) => (e.AVAX = \"0x0000000000000000000000000000000000000000\", e.ETH = \"0x0000000000000000000000000000000000000000\", e.BSC = \"0x0000000000000000000000000000000000000000\", e.USDC_SPL_MINT_ADDRESS = \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\", e.USDC_SPL_TESTNET_MINT_ADDRESS = \"6TEqT62wq5mbKQPubX9eFeNJRYXRJd79Hk51pZk7nZrB\", e))(I || {}), f = /* @__PURE__ */ ((e) => (e.Mainnet = \"mainnet\", e.Testnet = \"testnet\", e))(f || {}), h = /* @__PURE__ */ ((e) => (e[e.Ethereum = 60] = \"Ethereum\", e[e.Binance = 714] = \"Binance\", e[e.THORChain = 931] = \"THORChain\", e))(h || {}), _ = /* @__PURE__ */ ((e) => (e.AVAX = \"m/44'/60'/0'/0\", e.BCH = \"m/44'/145'/0'/0\", e.BNB = \"m/44'/714'/0'/0\", e.BSC = \"m/44'/60'/0'/0\", e.BTC = \"m/84'/0'/0'/0\", e.DOGE = \"m/44'/3'/0'/0\", e.ETH = \"m/44'/60'/0'/0\", e.GAIA = \"m/44'/118'/0'/0\", e.LTC = \"m/84'/2'/0'/0\", e.THOR = \"m/44'/931'/0'/0\", e))(_ || {});\nconst P = {\n  AVAX: [44, 60, 0, 0, 0],\n  BCH: [84, 145, 0, 0, 0],\n  BNB: [44, 714, 0, 0, 0],\n  BSC: [44, 60, 0, 0, 0],\n  BTC: [84, 0, 0, 0, 0],\n  DOGE: [44, 3, 0, 0, 0],\n  ETH: [44, 60, 0, 0, 0],\n  GAIA: [44, 118, 0, 0, 0],\n  LTC: [84, 2, 0, 0, 0],\n  THOR: [44, 931, 0, 0, 0]\n};\nvar g = /* @__PURE__ */ ((e) => (e[e.AVAX = 18] = \"AVAX\", e[e.BCH = 8] = \"BCH\", e[e.BNB = 8] = \"BNB\", e[e.BSC = 18] = \"BSC\", e[e.BTC = 8] = \"BTC\", e[e.DOGE = 8] = \"DOGE\", e[e.ETH = 18] = \"ETH\", e[e.GAIA = 6] = \"GAIA\", e[e.LTC = 8] = \"LTC\", e[e.THOR = 8] = \"THOR\", e))(g || {}), b = /* @__PURE__ */ ((e) => (e.Avalanche = \"43114\", e.AvalancheHex = \"0xa86a\", e.Binance = \"Binance-Chain-Tigris\", e.BinanceSmartChain = \"56\", e.Bitcoin = \"bitcoin\", e.Bitcoincash = \"bitcoincash\", e.Cosmos = \"cosmoshub-4\", e.Dogecoin = \"dogecoin\", e.Ethereum = \"1\", e.EthereumHex = \"0x1\", e.Litecoin = \"litecoin\", e.Thorchain = \"thorchain-mainnet-v1\", e.ThorchainStagenet = \"thorchain-stagenet-v2\", e))(b || {}), B = /* @__PURE__ */ ((e) => (e.Avalanche = \"https://node-router.thorswap.net/avalanche-c\", e.BinanceSmartChain = \"https://bsc-dataseed.binance.org\", e.Cosmos = \"https://node-router.thorswap.net/cosmos/rpc\", e.Ethereum = \"https://node-router.thorswap.net/ethereum\", e.Litecoin = \"https://node-router.thorswap.net/litecoin\", e.Bitcoin = \"https://node-router.thorswap.net/bitcoin\", e.Dogecoin = \"https://node-router.thorswap.net/dogecoin\", e.BitcoinCash = \"https://node-router.thorswap.net/bitcoin-cash\", e))(B || {}), x = /* @__PURE__ */ ((e) => (e.Thorswap = \"https://api.thorswap.finance\", e))(x || {});\nconst R = {\n  AVAX: \"https://node-router.thorswap.net/avalanche-c\",\n  BSC: \"https://bsc-dataseed.binance.org\",\n  ETH: \"https://node-router.thorswap.net/ethereum\",\n  GAIA: \"https://node-router.thorswap.net/cosmos/rpc\",\n  LTC: \"https://node-router.thorswap.net/litecoin\",\n  BTC: \"https://node-router.thorswap.net/bitcoin\",\n  DOGE: \"https://node-router.thorswap.net/dogecoin\",\n  BCH: \"https://node-router.thorswap.net/bitcoin-cash\"\n  /* BitcoinCash */\n}, D = {\n  AVAX: \"43114\",\n  BNB: \"Binance-Chain-Tigris\",\n  BSC: \"56\",\n  BTC: \"bitcoin\",\n  BCH: \"bitcoincash\",\n  GAIA: \"cosmoshub-4\",\n  DOGE: \"dogecoin\",\n  ETH: \"1\",\n  LTC: \"litecoin\",\n  THOR: \"thorchain-mainnet-v1\"\n  /* Thorchain */\n}, F = {\n  AVAX: \"0xa86a\",\n  BNB: \"Binance-Chain-Tigris\",\n  BSC: \"56\",\n  BTC: \"bitcoin\",\n  BCH: \"bitcoincash\",\n  GAIA: \"cosmoshub-4\",\n  DOGE: \"dogecoin\",\n  ETH: \"0x1\",\n  LTC: \"litecoin\",\n  THOR: \"thorchain-mainnet-v1\"\n  /* Thorchain */\n}, X = {\n  [\n    \"0xa86a\"\n    /* AvalancheHex */\n  ]: \"AVAX\",\n  [\n    43114\n    /* Avalanche */\n  ]: \"AVAX\",\n  [\n    \"Binance-Chain-Tigris\"\n    /* Binance */\n  ]: \"BNB\",\n  [\n    56\n    /* BinanceSmartChain */\n  ]: \"BSC\",\n  bitcoin: \"BTC\",\n  bitcoincash: \"BCH\",\n  [\n    \"cosmoshub-4\"\n    /* Cosmos */\n  ]: \"GAIA\",\n  dogecoin: \"DOGE\",\n  [\n    \"0x1\"\n    /* EthereumHex */\n  ]: \"ETH\",\n  [\n    1\n    /* Ethereum */\n  ]: \"ETH\",\n  litecoin: \"LTC\",\n  [\n    \"thorchain-mainnet-v1\"\n    /* Thorchain */\n  ]: \"THOR\",\n  [\n    \"thorchain-stagenet-v2\"\n    /* ThorchainStagenet */\n  ]: \"THOR\"\n  /* THORChain */\n};\nvar L = /* @__PURE__ */ ((e) => (e[e.NoError = 36864] = \"NoError\", e))(L || {});\nconst K = \"image rally need wedding health address purse army antenna leopard sea gain\";\nvar H = /* @__PURE__ */ ((e) => (e[e.NotInstalled = 0] = \"NotInstalled\", e[e.Detected = 1] = \"Detected\", e))(H || {}), v = /* @__PURE__ */ ((e) => (e.Average = \"average\", e.Fast = \"fast\", e.Fastest = \"fastest\", e))(v || {}), C = /* @__PURE__ */ ((e) => (e.FlatFee = \"base\", e.PerByte = \"byte\", e))(C || {}), V = /* @__PURE__ */ ((e) => (e.KEYSTORE = \"KEYSTORE\", e.XDEFI = \"XDEFI\", e.METAMASK = \"METAMASK\", e.COINBASE_WEB = \"COINBASE_WEB\", e.TREZOR = \"TREZOR\", e.TRUSTWALLET = \"TRUSTWALLET\", e.TRUSTWALLET_WEB = \"TRUSTWALLET_WEB\", e.LEDGER = \"LEDGER\", e.KEPLR = \"KEPLR\", e.BRAVE = \"BRAVE\", e.WALLETCONNECT = \"WALLETCONNECT\", e))(V || {});\nexport {\n  p as ApiError,\n  x as ApiUrl,\n  c as AssetSymbol,\n  g as BaseDecimal,\n  E as Chain,\n  b as ChainId,\n  X as ChainIdToChain,\n  D as ChainToChainId,\n  F as ChainToHexChainId,\n  R as ChainToRPC,\n  I as ContractAddress,\n  A as Denomination,\n  _ as DerivationPath,\n  N as ERROR_CODE,\n  S as ERROR_MODULE,\n  i as ERROR_TYPE,\n  L as ErrorCode,\n  v as FeeOption,\n  C as FeeType,\n  K as MOCK_PHRASE,\n  f as Network,\n  P as NetworkDerivationPath,\n  h as NetworkId,\n  B as RPCUrl,\n  w as SUPPORTED_CHAINS,\n  G as TCAvalancheDepositABI,\n  U as TCEthereumVaultAbi,\n  V as WalletOption,\n  H as WalletStatus,\n  O as erc20ABI\n};\n//# sourceMappingURL=index.es.js.map\n","import { Chain } from '@thorswap-lib/types';\nimport type { BigNumber } from 'bignumber.js';\n\nexport const getAssetType = (chain: Chain, ticker: string, isSynth = false) => {\n  if (isSynth) return 'Synth';\n\n  switch (chain) {\n    case Chain.Bitcoin:\n    case Chain.BitcoinCash:\n    case Chain.Doge:\n    case Chain.Litecoin:\n    case Chain.THORChain:\n      return 'Native';\n    case Chain.Cosmos:\n      return ticker === 'ATOM' ? 'Native' : 'GAIA';\n    case Chain.Binance:\n      return ticker === 'BNB' ? 'Native' : 'BEP2';\n    case Chain.BinanceSmartChain:\n      return ticker === 'BNB' ? 'Native' : 'BEP20';\n    case Chain.Ethereum:\n      return ticker === 'ETH' ? 'Native' : 'ERC20';\n    case Chain.Avalanche:\n      return ticker === 'AVAX' ? 'Native' : 'AVAX';\n    default:\n      return chain;\n  }\n};\n\nexport const BN_FORMAT: BigNumber.Format = {\n  prefix: '',\n  decimalSeparator: '.',\n  groupSeparator: ',',\n  groupSize: 3,\n  secondaryGroupSize: 0,\n  fractionGroupSeparator: ' ',\n  fractionGroupSize: 0,\n  suffix: '',\n};\n","import { BaseDecimal } from '@thorswap-lib/types';\nimport { BigNumber } from 'bignumber.js';\n\nimport { BN_FORMAT } from '../helpers/asset.js';\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP,\n}\n\nexport enum AmountType {\n  BASE_AMOUNT,\n  ASSET_AMOUNT,\n}\n\nconst roundingMode = {\n  [Rounding.ROUND_DOWN]: BigNumber.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: BigNumber.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: BigNumber.ROUND_UP,\n};\n\nexport const EMPTY_FORMAT: BigNumber.Format = {\n  groupSeparator: '',\n  decimalSeparator: '.',\n};\n\nexport class Amount {\n  public readonly assetAmount: BigNumber;\n  public readonly baseAmount: BigNumber;\n  public readonly decimal: number;\n\n  public static fromMidgard(amount?: BigNumber.Value) {\n    return new Amount(amount || 0, AmountType.BASE_AMOUNT, BaseDecimal.THOR);\n  }\n\n  public static fromBaseAmount(amount: BigNumber.Value, decimal: number) {\n    return new Amount(amount, AmountType.BASE_AMOUNT, decimal);\n  }\n\n  public static fromAssetAmount(amount: BigNumber.Value, decimal: number) {\n    return new Amount(amount, AmountType.ASSET_AMOUNT, decimal);\n  }\n\n  public static fromNormalAmount(amount?: BigNumber.Value) {\n    return new Amount(amount || 0, AmountType.ASSET_AMOUNT, 1);\n  }\n\n  public static sorter(a: Amount, b: Amount) {\n    if (a.decimal !== b.decimal) throw new Error('Decimal must be same');\n\n    return a.assetAmount.minus(b.assetAmount).toNumber();\n  }\n\n  constructor(amount: BigNumber.Value, type: AmountType = AmountType.BASE_AMOUNT, decimal: number) {\n    this.decimal = decimal;\n    const decimalAmount = 10 ** decimal;\n\n    if (type === AmountType.BASE_AMOUNT) {\n      this.baseAmount = new BigNumber(amount);\n      this.assetAmount = this.baseAmount.dividedBy(decimalAmount);\n    } else {\n      this.assetAmount = new BigNumber(amount);\n      this.baseAmount = this.assetAmount.multipliedBy(decimalAmount);\n    }\n\n    // remove decimal points for baseAmount\n    this.baseAmount = new BigNumber(this.baseAmount.integerValue(BigNumber.ROUND_DOWN));\n  }\n\n  add(amount: Amount) {\n    return new Amount(\n      this.assetAmount.plus(amount.assetAmount),\n      AmountType.ASSET_AMOUNT,\n      this.decimal,\n    );\n  }\n\n  sub(amount: Amount) {\n    return new Amount(\n      this.assetAmount.minus(amount.assetAmount),\n      AmountType.ASSET_AMOUNT,\n      this.decimal,\n    );\n  }\n\n  mul(value: BigNumber.Value | Amount) {\n    if (value instanceof Amount) {\n      return new Amount(\n        this.assetAmount.multipliedBy(value.assetAmount),\n        AmountType.ASSET_AMOUNT,\n        this.decimal,\n      );\n    }\n    return new Amount(this.assetAmount.multipliedBy(value), AmountType.ASSET_AMOUNT, this.decimal);\n  }\n\n  div(value: BigNumber.Value | Amount) {\n    if (value instanceof Amount) {\n      return new Amount(\n        this.assetAmount.dividedBy(value.assetAmount),\n        AmountType.ASSET_AMOUNT,\n        this.decimal,\n      );\n    }\n    return new Amount(this.assetAmount.dividedBy(value), AmountType.ASSET_AMOUNT, this.decimal);\n  }\n\n  gte(amount: Amount | BigNumber.Value) {\n    if (amount instanceof Amount) {\n      return this.assetAmount.isGreaterThanOrEqualTo(amount.assetAmount);\n    }\n\n    return this.assetAmount.isGreaterThanOrEqualTo(amount);\n  }\n\n  gt(amount: Amount | BigNumber.Value) {\n    if (amount instanceof Amount) {\n      return this.assetAmount.isGreaterThan(amount.assetAmount);\n    }\n\n    return this.assetAmount.isGreaterThan(amount);\n  }\n\n  lte(amount: Amount | BigNumber.Value) {\n    if (amount instanceof Amount) {\n      return this.assetAmount.isLessThanOrEqualTo(amount.assetAmount);\n    }\n\n    return this.assetAmount.isLessThanOrEqualTo(amount);\n  }\n\n  lt(amount: Amount | BigNumber.Value) {\n    if (amount instanceof Amount) {\n      return this.assetAmount.isLessThan(amount.assetAmount);\n    }\n\n    return this.assetAmount.isLessThan(amount);\n  }\n\n  eq(amount: Amount | BigNumber.Value) {\n    if (amount instanceof Amount) {\n      return this.assetAmount.isEqualTo(amount.assetAmount);\n    }\n\n    return this.assetAmount.isEqualTo(amount);\n  }\n\n  toSignificant(\n    significantDigits = 8,\n    maxDecimals = 8,\n    format: BigNumber.Format = BN_FORMAT,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ) {\n    return this.toSignificantBigNumber(significantDigits, format, rounding)\n      .decimalPlaces(maxDecimals)\n      .toFormat();\n  }\n\n  toFixedDecimal(\n    decimalPlaces = 8,\n    format: BigNumber.Format = EMPTY_FORMAT,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ) {\n    if (!Number.isInteger(decimalPlaces)) throw new Error(`${decimalPlaces} is not an integer.`);\n    if (decimalPlaces <= 0) throw new Error(`${decimalPlaces} is not positive.`);\n\n    BigNumber.config({ FORMAT: format });\n    const fixed = new BigNumber(this.assetAmount.toFixed(decimalPlaces, roundingMode[rounding]));\n\n    return fixed.toFormat();\n  }\n\n  toFixed(\n    decimalPlaces = 8,\n    format: BigNumber.Format = BN_FORMAT,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ) {\n    return this.toFixedDecimal(decimalPlaces, format, rounding);\n  }\n\n  toAbbreviate(decimalPlaces = 2) {\n    let newValue = this.assetAmount.toNumber();\n    const suffixes = ['', 'K', 'M', 'B', 'T', 'Q', 'Q', 's'];\n    let suffixNum = 0;\n\n    while (newValue >= 1000) {\n      newValue /= 1000;\n      suffixNum++;\n    }\n\n    return `${newValue.toFixed(decimalPlaces)}${suffixNum > 0 ? ` ${suffixes[suffixNum]}` : ''}`;\n  }\n\n  private toSignificantBigNumber(\n    significantDigits = 8,\n    format: BigNumber.Format = BN_FORMAT,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ) {\n    if (!Number.isInteger(significantDigits))\n      throw new Error(`${significantDigits} is not an integer.`);\n    if (significantDigits <= 0) throw new Error(`${significantDigits} is not positive.`);\n\n    BigNumber.config({ FORMAT: format });\n\n    return new BigNumber(this.assetAmount.toPrecision(significantDigits, roundingMode[rounding]));\n  }\n}\n\nexport const formatBigNumber = (\n  bn: BigNumber,\n  decimalPlaces = 8,\n  rounding: Rounding = Rounding.ROUND_DOWN,\n) => {\n  BigNumber.config({ FORMAT: BN_FORMAT });\n  const fixed = new BigNumber(bn.toFixed(decimalPlaces, roundingMode[rounding]));\n\n  return fixed.toFormat();\n};\n","import { BaseDecimal } from '@thorswap-lib/types';\n\nimport { Amount } from '../entities/amount.js';\n\ntype ShareParams<T = {}> = T & {\n  liquidityUnits: string;\n  poolUnits: string;\n};\n\ntype PoolParams<T = {}> = T & {\n  runeAmount: string;\n  assetAmount: string;\n  runeDepth: string;\n  assetDepth: string;\n};\n\n// formula: Total Balance * liquidity Units / total Units\nexport const getRuneShare = ({\n  liquidityUnits,\n  poolUnits,\n  runeDepth,\n}: ShareParams<{ runeDepth: string }>) =>\n  Amount.fromBaseAmount(runeDepth, BaseDecimal.THOR).mul(liquidityUnits).div(poolUnits);\n\nexport const getAssetShare = ({\n  liquidityUnits,\n  poolUnits,\n  assetDepth,\n}: ShareParams<{ assetDepth: string }>) =>\n  Amount.fromBaseAmount(assetDepth, BaseDecimal.THOR).mul(liquidityUnits).div(poolUnits);\n\n/**\n *  Ref: https://gitlab.com/thorchain/thornode/-/issues/657\n *  share = (s * A * (2 * T^2 - 2 * T * s + s^2))/T^3\n *  s = stakeUnits for member (after factoring in withdrawBasisPoints)\n *  T = totalPoolUnits for pool\n *  A = assetDepth to be withdrawn\n *\n *  Formula:\n *  share = (s * A * (2 * T^2 - 2 * T * s + s^2))/T^3\n *  (part1 * (part2 - part3 + part4)) / part5\n */\nexport const getAsymmetricRuneShare = ({\n  liquidityUnits,\n  poolUnits,\n  runeDepth,\n}: ShareParams<{ runeDepth: string }>) => {\n  const s = Amount.fromMidgard(liquidityUnits);\n  const T = Amount.fromBaseAmount(poolUnits, BaseDecimal.THOR);\n  const A = Amount.fromBaseAmount(runeDepth, BaseDecimal.THOR);\n\n  const part1 = s.mul(A);\n  const part2 = T.mul(T).mul(2);\n  const part3 = T.mul(s).mul(2);\n  const part4 = s.mul(s);\n  const part5 = T.mul(T).mul(T);\n\n  const numerator = part1.mul(part2.sub(part3).add(part4));\n  const amount = numerator.div(part5);\n\n  return amount;\n};\n\nexport const getAsymmetricAssetShare = ({\n  liquidityUnits,\n  poolUnits,\n  assetDepth,\n}: ShareParams<{ assetDepth: string }>) => {\n  const s = Amount.fromMidgard(liquidityUnits);\n  const T = Amount.fromBaseAmount(poolUnits, BaseDecimal.THOR);\n  const A = Amount.fromBaseAmount(assetDepth, BaseDecimal.THOR);\n\n  const part1 = s.mul(A);\n  const part2 = T.mul(T).mul(2);\n  const part3 = T.mul(s).mul(2);\n  const part4 = s.mul(s);\n  const numerator = part1.mul(part2.sub(part3).add(part4));\n  const part5 = T.mul(T).mul(T);\n\n  const amount = numerator.div(part5);\n\n  return amount;\n};\n\nexport const getAsymmetricRuneWithdrawAmount = ({\n  percent,\n  runeDepth,\n  liquidityUnits,\n  poolUnits,\n}: ShareParams<{ percent: number; runeDepth: string }>) =>\n  getAsymmetricRuneShare({ runeDepth, liquidityUnits, poolUnits }).mul(percent);\n\nexport const getAsymmetricAssetWithdrawAmount = ({\n  percent,\n  assetDepth,\n  liquidityUnits,\n  poolUnits,\n}: ShareParams<{ percent: number; assetDepth: string }>) =>\n  getAsymmetricAssetShare({ assetDepth, liquidityUnits, poolUnits }).mul(percent);\n\nexport const getSymmetricWithdraw = ({\n  liquidityUnits,\n  poolUnits,\n  runeDepth,\n  assetDepth,\n  percent,\n}: ShareParams<{\n  runeDepth: string;\n  assetDepth: string;\n  percent: number;\n}>) => ({\n  assetAmount: getAssetShare({ liquidityUnits, poolUnits, assetDepth }).mul(percent),\n  runeAmount: getRuneShare({ liquidityUnits, poolUnits, runeDepth }).mul(percent),\n});\n\nexport const getEstimatedPoolShare = ({\n  runeDepth,\n  poolUnits,\n  assetDepth,\n  liquidityUnits,\n  runeAmount,\n  assetAmount,\n}: ShareParams<{\n  runeAmount: string;\n  assetAmount: string;\n  runeDepth: string;\n  assetDepth: string;\n}>) => {\n  const R = Amount.fromBaseAmount(runeDepth, BaseDecimal.THOR);\n  const A = Amount.fromBaseAmount(assetDepth, BaseDecimal.THOR);\n  const P = Amount.fromBaseAmount(poolUnits, BaseDecimal.THOR);\n  const runeAddAmount = Amount.fromBaseAmount(runeAmount, BaseDecimal.THOR);\n  const assetAddAmount = Amount.fromBaseAmount(assetAmount, BaseDecimal.THOR);\n\n  // liquidityUnits = P * (r*A + a*R + 2*r*a) / (r*A + a*R + 2*R*A)\n  const rA = runeAddAmount.mul(A);\n  const aR = assetAddAmount.mul(R);\n  const ra = runeAddAmount.mul(assetAddAmount);\n  const RA = R.mul(A);\n  const numerator = P.mul(rA.add(aR.add(ra.mul(2))));\n  const denominator = rA.add(aR.add(RA.mul(2)));\n  const liquidityUnitsAfterAdd = numerator.div(denominator);\n  const estimatedLiquidityUnits = Amount.fromMidgard(liquidityUnits).add(liquidityUnitsAfterAdd);\n\n  // get pool units after add\n  const newPoolUnits = P.add(estimatedLiquidityUnits);\n\n  return estimatedLiquidityUnits.div(newPoolUnits).assetAmount.toNumber();\n};\n\nexport const getLiquiditySlippage = ({\n  runeAmount,\n  assetAmount,\n  runeDepth,\n  assetDepth,\n}: PoolParams) => {\n  // formula: (t * R - T * r)/ (T*r + R*T)\n  const R = Amount.fromBaseAmount(runeDepth, BaseDecimal.THOR);\n  const T = Amount.fromBaseAmount(assetDepth, BaseDecimal.THOR);\n  const assetAddAmount = Amount.fromBaseAmount(assetAmount, BaseDecimal.THOR);\n  const runeAddAmount = Amount.fromBaseAmount(runeAmount, BaseDecimal.THOR);\n\n  const numerator = assetAddAmount.mul(R).sub(T.mul(runeAddAmount));\n  const denominator = T.mul(runeAddAmount).add(R.mul(T));\n\n  // set absolute value of percent, no negative allowed\n  return numerator.div(denominator).assetAmount.absoluteValue().toNumber();\n};\n","import { Chain } from '@thorswap-lib/types';\n\nexport enum MemoType {\n  BOND = 'BOND',\n  DEPOSIT = '+',\n  LEAVE = 'LEAVE',\n  THORNAME_REGISTER = '~',\n  UNBOND = 'UNBOND',\n  UPGRADE = 'SWITCH',\n  WITHDRAW = '-',\n  OPEN_LOAN = '$+',\n  CLOSE_LOAN = '$-',\n}\n\nexport type ThornameRegisterParam = {\n  name: string;\n  chain: string;\n  address: string;\n  owner?: string;\n  preferredAsset?: string;\n  expiryBlock?: string;\n};\n\nconst getShortenedSymbol = ({\n  symbol,\n  ticker,\n  chain,\n}: {\n  ticker: string;\n  symbol: string;\n  chain: string | Chain;\n}) => (chain === 'ETH' && ticker !== 'ETH' ? `${ticker}-${symbol.slice(-3)}` : symbol);\n\ntype WithAddress<T = {}> = T & { address: string };\ntype WithChain<T = {}> = T & { chain: Chain };\n\nexport type MemoOptions<T extends MemoType> = {\n  [MemoType.BOND]: WithAddress;\n  [MemoType.LEAVE]: WithAddress;\n  [MemoType.UPGRADE]: WithAddress;\n  [MemoType.CLOSE_LOAN]: WithAddress<{ asset: string; minAmount?: string }>;\n  [MemoType.OPEN_LOAN]: WithAddress<{ asset: string; minAmount?: string }>;\n  [MemoType.UNBOND]: WithAddress<{ unbondAmount: number }>;\n  [MemoType.DEPOSIT]: WithChain<{ symbol: string; address?: string; singleSide?: boolean }>;\n  [MemoType.WITHDRAW]: WithChain<{\n    ticker: string;\n    symbol: string;\n    basisPoints: number;\n    targetAssetString?: string;\n    singleSide?: boolean;\n  }>;\n  [MemoType.THORNAME_REGISTER]: Omit<ThornameRegisterParam, 'preferredAsset' | 'expiryBlock'>;\n}[T];\n\nexport const getMemoFor = <T extends MemoType>(memoType: T, options: MemoOptions<T>) => {\n  switch (memoType) {\n    case MemoType.LEAVE:\n    case MemoType.UPGRADE:\n    case MemoType.BOND: {\n      const { address } = options as MemoOptions<MemoType.BOND>;\n      return `${memoType}:${address}`;\n    }\n\n    case MemoType.UNBOND: {\n      const { address, unbondAmount } = options as MemoOptions<MemoType.UNBOND>;\n      return `${memoType}:${address}:${unbondAmount * 10 ** 8}`;\n    }\n\n    case MemoType.THORNAME_REGISTER: {\n      const { name, chain, address, owner } = options as MemoOptions<MemoType.THORNAME_REGISTER>;\n      return `${memoType}:${name}:${chain}:${address}${owner ? `:${owner}` : ''}`;\n    }\n\n    case MemoType.DEPOSIT: {\n      const { chain, symbol, address, singleSide } = options as MemoOptions<MemoType.DEPOSIT>;\n\n      return singleSide\n        ? `${memoType}:${chain}/${symbol}::t:0`\n        : `${memoType}:${chain}.${symbol}${address ? `:${address}` : ''}`;\n    }\n\n    case MemoType.WITHDRAW: {\n      const { chain, ticker, symbol, basisPoints, targetAssetString, singleSide } =\n        options as MemoOptions<MemoType.WITHDRAW>;\n\n      const target = !singleSide && targetAssetString ? `:${targetAssetString}` : '';\n      const shortenedSymbol = getShortenedSymbol({ chain, symbol, ticker });\n      const assetDivider = singleSide ? '/' : '.';\n\n      return `${memoType}:${chain}${assetDivider}${shortenedSymbol}:${basisPoints}${target}`;\n    }\n\n    case MemoType.OPEN_LOAN:\n    case MemoType.CLOSE_LOAN: {\n      const { asset, address } = options as MemoOptions<MemoType.OPEN_LOAN>;\n\n      return `${memoType}:${asset}:${address}`; //:${minAmount ? `${minAmount}` : ''}:t:0`;\n    }\n\n    default:\n      return '';\n  }\n};\n","import { Chain } from '@thorswap-lib/types';\n\nexport const getNetworkName = (chain: Chain, ticker: string) => {\n  if (chain === Chain.Bitcoin) return 'Bitcoin';\n  if (chain === Chain.Doge) return 'Dogecoin';\n  if (chain === Chain.Litecoin) return 'Litecoin';\n  if (chain === Chain.BitcoinCash) return 'Bitcoin Cash';\n\n  if (chain === Chain.Ethereum && ticker === 'ETH') {\n    return 'Ethereum';\n  }\n\n  return ticker;\n};\n","// 10 rune for register, 1 rune per year\n// MINIMUM_REGISTRATION_FEE = 11\nexport const getTHORNameCost = (year: number) => {\n  if (year < 0) throw new Error('Invalid number of year');\n  return 10 + year;\n};\n\nexport const validateTHORName = (name: string) => {\n  if (name.length > 30) return false;\n\n  const regex = /^[a-zA-Z0-9+_-]+$/g;\n\n  return !!name.match(regex);\n};\n","import { AssetSymbol, BaseDecimal, Chain } from '@thorswap-lib/types';\n\nimport { getAssetType, getNetworkName } from '../helpers/index.js';\n\n/**\n * L1 asset format:\n * - CHAIN.SYMBOL (Raw string, URL)\n * Synth asset format: CHAIN/SYMBOL\n * - CHAIN/SYMBOL (Raw string)\n * - THOR.CHAIN.SYMBOL (URL)\n */\n\nexport class AssetEntity {\n  public readonly chain: Chain;\n  public readonly symbol: string;\n  public readonly ticker: string;\n  public readonly type: string;\n  public readonly network: string;\n  public readonly name: string;\n  public decimal: number;\n  public isSynth = false;\n  public L1Chain: Chain;\n\n  public static fromAssetString(asset?: string) {\n    if (!asset) return null;\n\n    const isSynth = asset.includes('/');\n    const [chain, ...symbolArray] = asset.split(isSynth ? '/' : '.');\n    const symbol = symbolArray.join('.');\n    const ticker = symbol?.split('-')?.[0];\n    const canCreateAsset = chain && symbol && ticker;\n\n    return canCreateAsset ? new AssetEntity(chain as Chain, symbol, isSynth) : null;\n  }\n\n  /**\n   *\n   * @param urlEncodedAsset asset string from url\n   * @returns btc.btc -> btc.btc, thor.btc.btc -> btc/btc\n   */\n  public static decodeFromURL = (urlEncodedAsset: string) => {\n    let assetString = urlEncodedAsset.toUpperCase();\n\n    if (assetString.startsWith('THOR.') && assetString.split('THOR.')?.[1] !== 'RUNE') {\n      // synth asset\n      assetString = assetString.split('THOR.')?.[1]?.replace('.', '/');\n    }\n\n    return AssetEntity.fromAssetString(assetString);\n  };\n\n  constructor(chain: Chain, symbol: string, isSynth = false, ticker?: string) {\n    this.chain = chain;\n    this.symbol = symbol.toUpperCase();\n    this.ticker = ticker || symbol.toUpperCase().split('-')[0];\n    this.type = getAssetType(chain, this.ticker, isSynth);\n    this.name = isSynth ? `Synth ${this.ticker}` : this.ticker;\n    this.network = getNetworkName(chain, this.ticker);\n    this.decimal = isSynth ? BaseDecimal.THOR : BaseDecimal[chain];\n    this.isSynth = isSynth;\n    this.L1Chain = isSynth ? Chain.THORChain : chain;\n  }\n\n  public setDecimal = (decimal?: number) => {\n    this.decimal = decimal || BaseDecimal[this.chain] || BaseDecimal.THOR;\n  };\n\n  public getAssetObj() {\n    // synth format: THOR.btc/btc (NOTE: lowercase notation)\n    if (this.isSynth) {\n      const synthSymbol = `${this.chain.toLowerCase()}/${this.symbol.toLowerCase()}`;\n\n      return {\n        chain: Chain.THORChain,\n        symbol: synthSymbol,\n        ticker: synthSymbol,\n      };\n    }\n\n    // L1 format: BTC.BTC\n    return { chain: this.chain, symbol: this.symbol, ticker: this.ticker };\n  }\n\n  /**\n   * convert asset entity to string\n   * @returns L1 asset -> btc.btc, Synth asset -> btc/btc\n   */\n  toString() {\n    return `${this.chain}${this.isSynth ? '/' : '.'}${this.symbol}`;\n  }\n\n  toURLEncoded() {\n    return `${this.isSynth ? 'THOR.' : ''}${this.chain}.${this.symbol}`;\n  }\n\n  // full compare chain, symbol, synth\n  eq(asset: AssetEntity) {\n    return (\n      this.chain === asset.chain &&\n      this.symbol.toUpperCase() === asset.symbol.toUpperCase() &&\n      this.ticker.toUpperCase() === asset.ticker.toUpperCase() &&\n      this.isSynth === asset.isSynth\n      // this.decimal === asset.decimal\n    );\n  }\n\n  // compare chain, symbol but not synth\n  shallowEq(asset: AssetEntity) {\n    return (\n      this.chain === asset.chain &&\n      this.symbol.toUpperCase() === asset.symbol.toUpperCase() &&\n      this.ticker.toUpperCase() === asset.ticker.toUpperCase()\n    );\n  }\n\n  isRUNE() {\n    return this.eq(getSignatureAssetFor(Chain.THORChain));\n  }\n\n  identifier() {\n    return `${this.chain}.${this.symbol}`;\n  }\n\n  toSynth() {\n    if (this.isSynth) return this;\n    return new AssetEntity(Chain.THORChain, `${this.chain}/${this.symbol}`, true);\n  }\n}\n\nconst THOR_MAINNET_SYMBOL = 'THOR-0XA5F2211B9B8170F694421F2046281775E8468044';\nconst ETH_RUNE_SYMBOL = 'RUNE-0X3155BA85D5F96B2D030A4966AF206230E46849CB';\n\ntype Signature = Chain | 'USD' | 'ETH_THOR' | 'ETH_RUNE' | 'BNB_RUNE' | 'THOR';\n\n// @ts-expect-error initialized in getSignatureAssetFor\nconst cachedSignatureAssets: Record<Signature, AssetEntity> = {};\nexport const getSignatureAssetFor = (signature: Signature) => {\n  if (cachedSignatureAssets[signature]) return cachedSignatureAssets[signature];\n\n  switch (signature) {\n    case Chain.Avalanche:\n    case Chain.Binance:\n    case Chain.BitcoinCash:\n    case Chain.Bitcoin:\n    case Chain.Doge:\n    case Chain.Ethereum:\n    case Chain.Litecoin: {\n      const asset = new AssetEntity(signature, signature);\n\n      cachedSignatureAssets[signature] = asset;\n      return asset;\n    }\n\n    case Chain.BinanceSmartChain: {\n      const bscAsset = new AssetEntity(Chain.BinanceSmartChain, Chain.Binance);\n      bscAsset.setDecimal(18);\n\n      cachedSignatureAssets[signature] = bscAsset;\n      return bscAsset;\n    }\n\n    case Chain.Cosmos: {\n      const asset = new AssetEntity(Chain.Cosmos, AssetSymbol.ATOM, false, AssetSymbol.ATOM);\n\n      cachedSignatureAssets[signature] = asset;\n      return asset;\n    }\n\n    case Chain.THORChain: {\n      const asset = new AssetEntity(Chain.THORChain, AssetSymbol.RUNE, false, AssetSymbol.RUNE);\n\n      cachedSignatureAssets[signature] = asset;\n      return asset;\n    }\n\n    case 'USD': {\n      const asset = new AssetEntity(Chain.THORChain, 'USD-USD', false, 'USD-USD');\n\n      cachedSignatureAssets[signature] = asset;\n      return asset;\n    }\n\n    case 'ETH_THOR': {\n      const thorAsset = new AssetEntity(Chain.Ethereum, THOR_MAINNET_SYMBOL);\n      thorAsset.setDecimal(18);\n\n      cachedSignatureAssets[signature] = thorAsset;\n      return thorAsset;\n    }\n\n    /**\n     * Remove after KillSwitch\n     */\n    case 'BNB_RUNE': {\n      const asset = new AssetEntity(Chain.Binance, 'RUNE-B1A');\n\n      cachedSignatureAssets[signature] = asset;\n      return asset;\n    }\n\n    case 'ETH_RUNE': {\n      const ethRune = new AssetEntity(Chain.Ethereum, ETH_RUNE_SYMBOL);\n      ethRune.setDecimal(18);\n\n      cachedSignatureAssets[signature] = ethRune;\n      return ethRune;\n    }\n\n    default: {\n      return new AssetEntity(Chain.THORChain, AssetSymbol.RUNE, false, AssetSymbol.RUNE);\n    }\n  }\n};\n\nexport const isGasAsset = (asset: AssetEntity) => asset.eq(getSignatureAssetFor(asset.chain));\n","import { BigNumber } from 'bignumber.js';\n\nimport { BN_FORMAT } from '../helpers/asset.js';\n\nimport { Amount, AmountType, Rounding } from './amount.js';\nimport { AssetEntity as Asset, AssetEntity } from './asset.js';\nimport { Pool } from './pool.js';\n\nconst poolByAsset = (asset: AssetEntity, pools: Pool[]) =>\n  pools.find((pool) => asset.shallowEq(pool.asset));\n\nexport class Price extends Amount {\n  public readonly baseAsset: Asset;\n\n  public readonly quoteAsset?: Asset;\n\n  public readonly unitPrice: BigNumber;\n\n  public readonly price: BigNumber;\n\n  public readonly amount: Amount;\n\n  constructor({\n    baseAsset,\n    quoteAsset,\n    unitPrice,\n    pools,\n    priceAmount,\n  }: {\n    baseAsset: Asset;\n    quoteAsset?: Asset;\n    unitPrice?: BigNumber;\n    pools?: Pool[];\n    priceAmount?: Amount;\n  }) {\n    const amount = Amount.fromAssetAmount(\n      priceAmount ? priceAmount.assetAmount : 1,\n      baseAsset.decimal,\n    );\n\n    super(amount.assetAmount, AmountType.ASSET_AMOUNT, baseAsset.decimal);\n\n    this.amount = amount;\n    this.baseAsset = baseAsset;\n    this.quoteAsset = quoteAsset;\n\n    if (unitPrice !== undefined) {\n      this.unitPrice = unitPrice;\n      this.price = amount.assetAmount.multipliedBy(unitPrice);\n    } else {\n      if (!pools) throw new Error('Pools must be provided if unitPrice omitted');\n\n      this.unitPrice = new BigNumber(0);\n\n      // if quoteAsset is not specified OR is USD, calc the price for USD\n      if (!quoteAsset) {\n        if (!baseAsset.isRUNE()) {\n          const pool = poolByAsset(baseAsset, pools!);\n\n          if (pool) {\n            // set USD price for non-RUNE asset\n            this.unitPrice = pool.assetUSDPrice.assetAmount;\n          }\n        } else {\n          const pool = pools?.[0];\n          // set USD Price of RUNE\n          if (pool) {\n            this.unitPrice = pool.runePriceInAsset.mul(pool.assetUSDPrice).assetAmount;\n          }\n        }\n      } else if (baseAsset.isRUNE() && !quoteAsset.isRUNE()) {\n        const pool = poolByAsset(quoteAsset, pools!);\n\n        if (pool) {\n          this.unitPrice = pool.runePriceInAsset.assetAmount;\n        }\n      } else if (!baseAsset.isRUNE() && quoteAsset.isRUNE()) {\n        const pool = poolByAsset(baseAsset, pools!);\n\n        if (pool) {\n          this.unitPrice = pool.assetPriceInRune.assetAmount;\n        }\n      } else if (!baseAsset.isRUNE() && !quoteAsset.isRUNE()) {\n        const baseAssetPool = poolByAsset(baseAsset, pools!);\n        const quoteAssetPool = poolByAsset(quoteAsset, pools!);\n\n        if (baseAssetPool && quoteAssetPool) {\n          this.unitPrice = baseAssetPool.assetPriceInRune.div(\n            quoteAssetPool.assetPriceInRune,\n          ).assetAmount;\n        }\n      } else {\n        // both are RUNE\n        this.unitPrice = new BigNumber(1);\n      }\n\n      this.price = this.unitPrice.multipliedBy(amount.assetAmount);\n    }\n  }\n\n  raw() {\n    return this.price;\n  }\n\n  invert() {\n    return new BigNumber(1).dividedBy(this.raw());\n  }\n\n  toCurrencyFormat(decimalPlaces = 8, abbreviate = true) {\n    const fixedLabel = abbreviate\n      ? this.toAbbreviateRaw(decimalPlaces)\n      : this.toFixedRaw(decimalPlaces);\n\n    const isUSDBased = !this.quoteAsset || this.quoteAsset.ticker === 'USD';\n\n    return isUSDBased ? `$${fixedLabel}` : `${fixedLabel} ${this.quoteAsset?.ticker}`;\n  }\n\n  toAbbreviateRaw(decimalPlaces = 2) {\n    return Amount.fromAssetAmount(this.price, 8).toAbbreviate(decimalPlaces);\n  }\n\n  toFixedRaw(\n    decimalPlaces = 8,\n    format: BigNumber.Format = BN_FORMAT,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ) {\n    return Amount.fromAssetAmount(this.price, 8).toFixed(decimalPlaces, format, rounding);\n  }\n\n  toFixedInverted(\n    decimalPlaces = 8,\n    format: BigNumber.Format = BN_FORMAT,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ) {\n    return Amount.fromAssetAmount(this.invert(), 8).toFixed(decimalPlaces, format, rounding);\n  }\n}\n","import { Chain } from '@thorswap-lib/types';\nimport { BigNumber } from 'bignumber.js';\n\nimport { BN_FORMAT } from '../helpers/asset.js';\n\nimport { Amount, AmountType, Rounding } from './amount.js';\nimport { AssetEntity, getSignatureAssetFor } from './asset.js';\nimport { Pool } from './pool.js';\nimport { Price } from './price.js';\n\nexport class AssetAmount extends Amount {\n  public readonly asset: AssetEntity;\n\n  public readonly amount: Amount;\n\n  constructor(asset: AssetEntity, amount: Amount) {\n    super(amount.assetAmount, AmountType.ASSET_AMOUNT, asset.decimal);\n    this.asset = asset;\n\n    // make sure amount has same decimal as asset\n    this.amount = new Amount(amount.assetAmount, AmountType.ASSET_AMOUNT, asset.decimal);\n  }\n\n  add(amount: AssetAmount) {\n    if (!this.asset.shallowEq(amount.asset)) throw new Error('asset must be same');\n\n    return new AssetAmount(this.asset, this.amount.add(amount.amount));\n  }\n\n  sub(amount: AssetAmount) {\n    if (!this.asset.shallowEq(amount.asset)) throw new Error('asset must be same');\n\n    return new AssetAmount(this.asset, this.amount.sub(amount.amount));\n  }\n\n  mul(value: BigNumber.Value | Amount) {\n    let amount;\n    if (value instanceof Amount) {\n      amount = new Amount(\n        this.assetAmount.multipliedBy(value.assetAmount),\n        AmountType.ASSET_AMOUNT,\n        this.decimal,\n      );\n    } else {\n      amount = new Amount(\n        this.assetAmount.multipliedBy(value),\n        AmountType.ASSET_AMOUNT,\n        this.decimal,\n      );\n    }\n\n    return new AssetAmount(this.asset, amount);\n  }\n\n  div(value: BigNumber.Value | Amount) {\n    let amount;\n    if (value instanceof Amount) {\n      amount = new Amount(\n        this.assetAmount.dividedBy(value.assetAmount),\n        AmountType.ASSET_AMOUNT,\n        this.decimal,\n      );\n    } else {\n      amount = new Amount(this.assetAmount.dividedBy(value), AmountType.ASSET_AMOUNT, this.decimal);\n    }\n\n    return new AssetAmount(this.asset, amount);\n  }\n\n  toCurrencyFormat(\n    {\n      significantDigits,\n      format,\n      rounding,\n    }: {\n      significantDigits?: number;\n      format?: BigNumber.Format;\n      rounding?: Rounding;\n    } = {\n      significantDigits: 6,\n      format: BN_FORMAT,\n      rounding: Rounding.ROUND_DOWN,\n    },\n    isPrefix = false,\n  ) {\n    const significantValue = super.toSignificant(significantDigits, 8, format, rounding);\n\n    if (isPrefix) {\n      return `${this.asset.ticker} ${significantValue}`;\n    }\n\n    return `${significantValue} ${this.asset.ticker}`;\n  }\n\n  totalPriceIn(quoteAsset: AssetEntity, pools: Pool[]) {\n    return new Price({\n      baseAsset: this.asset,\n      quoteAsset,\n      pools,\n      priceAmount: Amount.fromAssetAmount(this.assetAmount, this.decimal),\n    });\n  }\n}\n\nexport const getMinAmountByChain = (chain: Chain) => {\n  const asset = getSignatureAssetFor(chain);\n  const minAmount = [Chain.Bitcoin, Chain.Litecoin, Chain.BitcoinCash].includes(chain)\n    ? // 10001 satoshi\n      10001\n    : [Chain.Doge].includes(chain)\n    ? // 1 DOGE\n      100000001\n    : [Chain.Avalanche, Chain.Ethereum].includes(chain)\n    ? //  10 gwei\n      10 * 10 ** 9\n    : chain === Chain.THORChain\n    ? // 0 RUNE\n      0\n    : 1;\n\n  return new AssetAmount(asset, Amount.fromBaseAmount(minAmount, asset.decimal));\n};\n","import { BaseDecimal } from '@thorswap-lib/types';\n\nimport { Amount } from './amount.js';\nimport { AssetEntity as Asset } from './asset.js';\n\nexport interface PoolDetail {\n  annualPercentageRate: string;\n  asset: string;\n  assetDepth: string;\n  assetPrice: string;\n  assetPriceUSD: string;\n  liquidityUnits: string;\n  loanCollateral: string;\n  poolAPY: string;\n  runeDepth: string;\n  status: string;\n  synthSupply: string;\n  synthUnits: string;\n  units: string;\n  volume24h: string;\n}\n\nexport class Pool {\n  public readonly asset: Asset;\n  public readonly runeDepth: Amount;\n  public readonly assetDepth: Amount;\n  public readonly assetUSDPrice: Amount;\n  public readonly detail: PoolDetail;\n\n  public static fromPoolData(poolDetail: PoolDetail) {\n    const { asset, runeDepth, assetDepth } = poolDetail;\n    const assetObj = Asset.fromAssetString(asset);\n\n    if (assetObj && runeDepth && assetDepth) {\n      const runeAmount = Amount.fromBaseAmount(runeDepth, BaseDecimal.THOR);\n      const assetAmount = Amount.fromBaseAmount(assetDepth, BaseDecimal.THOR);\n\n      return new Pool(assetObj, runeAmount, assetAmount, poolDetail);\n    }\n\n    return null;\n  }\n\n  constructor(asset: Asset, runeDepth: Amount, assetDepth: Amount, detail: PoolDetail) {\n    this.asset = asset;\n    this.runeDepth = runeDepth;\n    this.assetDepth = assetDepth;\n    this.detail = detail;\n\n    this.assetUSDPrice = Amount.fromAssetAmount(detail.assetPriceUSD, BaseDecimal.THOR);\n  }\n\n  get assetPriceInRune() {\n    return this.runeDepth.div(this.assetDepth);\n  }\n\n  get runePriceInAsset() {\n    return this.assetDepth.div(this.runeDepth);\n  }\n}\n"],"names":["c","E","g","getAssetType","chain","ticker","isSynth","Chain","BN_FORMAT","Rounding","Rounding2","AmountType","AmountType2","roundingMode","BigNumber","EMPTY_FORMAT","Amount","amount","type","decimal","__publicField","decimalAmount","BaseDecimal","a","b","value","significantDigits","maxDecimals","format","rounding","decimalPlaces","newValue","suffixes","suffixNum","formatBigNumber","bn","getRuneShare","liquidityUnits","poolUnits","runeDepth","getAssetShare","assetDepth","getAsymmetricRuneShare","s","T","A","part1","part2","part3","part4","part5","getAsymmetricAssetShare","numerator","getAsymmetricRuneWithdrawAmount","percent","getAsymmetricAssetWithdrawAmount","getSymmetricWithdraw","getEstimatedPoolShare","runeAmount","assetAmount","R","P","runeAddAmount","assetAddAmount","rA","aR","ra","RA","denominator","liquidityUnitsAfterAdd","estimatedLiquidityUnits","newPoolUnits","getLiquiditySlippage","MemoType","getShortenedSymbol","symbol","getMemoFor","memoType","options","address","unbondAmount","name","owner","singleSide","basisPoints","targetAssetString","target","shortenedSymbol","asset","getNetworkName","getTHORNameCost","year","validateTHORName","regex","_AssetEntity","symbolArray","_a","synthSymbol","getSignatureAssetFor","AssetEntity","urlEncodedAsset","assetString","_c","_b","THOR_MAINNET_SYMBOL","ETH_RUNE_SYMBOL","cachedSignatureAssets","signature","bscAsset","AssetSymbol","thorAsset","ethRune","isGasAsset","poolByAsset","pools","pool","Price","baseAsset","quoteAsset","unitPrice","priceAmount","baseAssetPool","quoteAssetPool","abbreviate","fixedLabel","AssetAmount","isPrefix","significantValue","getMinAmountByChain","minAmount","Pool","detail","poolDetail","assetObj","Asset"],"mappings":"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"}