{"version":3,"file":"index.es.js","sources":["../../types/dist/index.es.js","../src/helpers/asset.ts","../src/entities/amount.ts","../src/helpers/liquidity.ts","../src/helpers/memo.ts","../src/helpers/network.ts","../src/helpers/thorname.ts","../src/entities/asset.ts","../src/entities/price.ts","../src/entities/assetAmount.ts","../src/entities/pool.ts"],"sourcesContent":["var l = Object.defineProperty;\nvar m = (e, n, t) => n in e ? l(e, n, { enumerable: !0, configurable: !0, writable: !0, value: t }) : e[n] = t;\nvar a = (e, n, t) => (m(e, typeof n != \"symbol\" ? n + \"\" : n, t), t);\nconst O = [\n  { inputs: [], stateMutability: \"nonpayable\", type: \"constructor\" },\n  {\n    anonymous: !1,\n    inputs: [\n      { indexed: !0, internalType: \"address\", name: \"owner\", type: \"address\" },\n      { indexed: !0, internalType: \"address\", name: \"spender\", type: \"address\" },\n      { indexed: !1, internalType: \"uint256\", name: \"value\", type: \"uint256\" }\n    ],\n    name: \"Approval\",\n    type: \"event\"\n  },\n  {\n    anonymous: !1,\n    inputs: [\n      { indexed: !0, internalType: \"address\", name: \"from\", type: \"address\" },\n      { indexed: !0, internalType: \"address\", name: \"to\", type: \"address\" },\n      { indexed: !1, internalType: \"uint256\", name: \"value\", type: \"uint256\" }\n    ],\n    name: \"Transfer\",\n    type: \"event\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"\", type: \"address\" },\n      { internalType: \"address\", name: \"\", type: \"address\" }\n    ],\n    name: \"allowance\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"spender\", type: \"address\" },\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" }\n    ],\n    name: \"approve\",\n    outputs: [{ internalType: \"bool\", name: \"success\", type: \"bool\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    name: \"balanceOf\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" }\n    ],\n    name: \"transfer\",\n    outputs: [{ internalType: \"bool\", name: \"success\", type: \"bool\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"from\", type: \"address\" },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" }\n    ],\n    name: \"transferFrom\",\n    outputs: [{ internalType: \"bool\", name: \"success\", type: \"bool\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }\n], U = [\n  {\n    inputs: [{ internalType: \"address\", name: \"rune\", type: \"address\" }],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\"\n  },\n  {\n    anonymous: !1,\n    inputs: [\n      { indexed: !0, internalType: \"address\", name: \"to\", type: \"address\" },\n      { indexed: !0, internalType: \"address\", name: \"asset\", type: \"address\" },\n      { indexed: !1, internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { indexed: !1, internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"Deposit\",\n    type: \"event\"\n  },\n  {\n    anonymous: !1,\n    inputs: [\n      { indexed: !0, internalType: \"address\", name: \"oldVault\", type: \"address\" },\n      { indexed: !0, internalType: \"address\", name: \"newVault\", type: \"address\" },\n      { indexed: !1, internalType: \"address\", name: \"asset\", type: \"address\" },\n      { indexed: !1, internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { indexed: !1, internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"TransferAllowance\",\n    type: \"event\"\n  },\n  {\n    anonymous: !1,\n    inputs: [\n      { indexed: !0, internalType: \"address\", name: \"vault\", type: \"address\" },\n      { indexed: !0, internalType: \"address\", name: \"to\", type: \"address\" },\n      { indexed: !1, internalType: \"address\", name: \"asset\", type: \"address\" },\n      { indexed: !1, internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { indexed: !1, internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"TransferOut\",\n    type: \"event\"\n  },\n  {\n    anonymous: !1,\n    inputs: [\n      { indexed: !0, internalType: \"address\", name: \"vault\", type: \"address\" },\n      { indexed: !1, internalType: \"address\", name: \"target\", type: \"address\" },\n      { indexed: !1, internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { indexed: !1, internalType: \"address\", name: \"finalAsset\", type: \"address\" },\n      { indexed: !1, internalType: \"address\", name: \"to\", type: \"address\" },\n      { indexed: !1, internalType: \"uint256\", name: \"amountOutMin\", type: \"uint256\" },\n      { indexed: !1, internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"TransferOutAndCall\",\n    type: \"event\"\n  },\n  {\n    anonymous: !1,\n    inputs: [\n      { indexed: !0, internalType: \"address\", name: \"oldVault\", type: \"address\" },\n      { indexed: !0, internalType: \"address\", name: \"newVault\", type: \"address\" },\n      {\n        components: [\n          { internalType: \"address\", name: \"asset\", type: \"address\" },\n          { internalType: \"uint256\", name: \"amount\", type: \"uint256\" }\n        ],\n        indexed: !1,\n        internalType: \"struct THORChain_Router.Coin[]\",\n        name: \"coins\",\n        type: \"tuple[]\"\n      },\n      { indexed: !1, internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"VaultTransfer\",\n    type: \"event\"\n  },\n  {\n    inputs: [],\n    name: \"RUNE\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address payable\", name: \"vault\", type: \"address\" },\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"deposit\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address payable\", name: \"vault\", type: \"address\" },\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"string\", name: \"memo\", type: \"string\" },\n      { internalType: \"uint256\", name: \"expiration\", type: \"uint256\" }\n    ],\n    name: \"depositWithExpiry\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"router\", type: \"address\" },\n      { internalType: \"address payable\", name: \"asgard\", type: \"address\" },\n      {\n        components: [\n          { internalType: \"address\", name: \"asset\", type: \"address\" },\n          { internalType: \"uint256\", name: \"amount\", type: \"uint256\" }\n        ],\n        internalType: \"struct THORChain_Router.Coin[]\",\n        name: \"coins\",\n        type: \"tuple[]\"\n      },\n      { internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"returnVaultAssets\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"router\", type: \"address\" },\n      { internalType: \"address\", name: \"newVault\", type: \"address\" },\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"transferAllowance\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address payable\", name: \"to\", type: \"address\" },\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"transferOut\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address payable\", name: \"aggregator\", type: \"address\" },\n      { internalType: \"address\", name: \"finalToken\", type: \"address\" },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amountOutMin\", type: \"uint256\" },\n      { internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"transferOutAndCall\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"vault\", type: \"address\" },\n      { internalType: \"address\", name: \"token\", type: \"address\" }\n    ],\n    name: \"vaultAllowance\",\n    outputs: [{ internalType: \"uint256\", name: \"amount\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }\n], G = [\n  { inputs: [], stateMutability: \"nonpayable\", type: \"constructor\" },\n  {\n    anonymous: !1,\n    inputs: [\n      { indexed: !0, internalType: \"address\", name: \"to\", type: \"address\" },\n      { indexed: !0, internalType: \"address\", name: \"asset\", type: \"address\" },\n      { indexed: !1, internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { indexed: !1, internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"Deposit\",\n    type: \"event\"\n  },\n  {\n    anonymous: !1,\n    inputs: [\n      { indexed: !0, internalType: \"address\", name: \"oldVault\", type: \"address\" },\n      { indexed: !0, internalType: \"address\", name: \"newVault\", type: \"address\" },\n      { indexed: !1, internalType: \"address\", name: \"asset\", type: \"address\" },\n      { indexed: !1, internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { indexed: !1, internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"TransferAllowance\",\n    type: \"event\"\n  },\n  {\n    anonymous: !1,\n    inputs: [\n      { indexed: !0, internalType: \"address\", name: \"vault\", type: \"address\" },\n      { indexed: !0, internalType: \"address\", name: \"to\", type: \"address\" },\n      { indexed: !1, internalType: \"address\", name: \"asset\", type: \"address\" },\n      { indexed: !1, internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { indexed: !1, internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"TransferOut\",\n    type: \"event\"\n  },\n  {\n    anonymous: !1,\n    inputs: [\n      { indexed: !0, internalType: \"address\", name: \"vault\", type: \"address\" },\n      { indexed: !1, internalType: \"address\", name: \"target\", type: \"address\" },\n      { indexed: !1, internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { indexed: !1, internalType: \"address\", name: \"finalAsset\", type: \"address\" },\n      { indexed: !1, internalType: \"address\", name: \"to\", type: \"address\" },\n      { indexed: !1, internalType: \"uint256\", name: \"amountOutMin\", type: \"uint256\" },\n      { indexed: !1, internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"TransferOutAndCall\",\n    type: \"event\"\n  },\n  {\n    anonymous: !1,\n    inputs: [\n      { indexed: !0, internalType: \"address\", name: \"oldVault\", type: \"address\" },\n      { indexed: !0, internalType: \"address\", name: \"newVault\", type: \"address\" },\n      {\n        components: [\n          { internalType: \"address\", name: \"asset\", type: \"address\" },\n          { internalType: \"uint256\", name: \"amount\", type: \"uint256\" }\n        ],\n        indexed: !1,\n        internalType: \"struct AvaxRouter.Coin[]\",\n        name: \"coins\",\n        type: \"tuple[]\"\n      },\n      { indexed: !1, internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"VaultTransfer\",\n    type: \"event\"\n  },\n  {\n    inputs: [\n      { internalType: \"address payable\", name: \"vault\", type: \"address\" },\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"deposit\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address payable\", name: \"vault\", type: \"address\" },\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"string\", name: \"memo\", type: \"string\" },\n      { internalType: \"uint256\", name: \"expiration\", type: \"uint256\" }\n    ],\n    name: \"depositWithExpiry\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"router\", type: \"address\" },\n      { internalType: \"address payable\", name: \"asgard\", type: \"address\" },\n      {\n        components: [\n          { internalType: \"address\", name: \"asset\", type: \"address\" },\n          { internalType: \"uint256\", name: \"amount\", type: \"uint256\" }\n        ],\n        internalType: \"struct AvaxRouter.Coin[]\",\n        name: \"coins\",\n        type: \"tuple[]\"\n      },\n      { internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"returnVaultAssets\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"router\", type: \"address\" },\n      { internalType: \"address\", name: \"newVault\", type: \"address\" },\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"transferAllowance\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address payable\", name: \"to\", type: \"address\" },\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"transferOut\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address payable\", name: \"target\", type: \"address\" },\n      { internalType: \"address\", name: \"finalToken\", type: \"address\" },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amountOutMin\", type: \"uint256\" },\n      { internalType: \"string\", name: \"memo\", type: \"string\" }\n    ],\n    name: \"transferOutAndCall\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"vault\", type: \"address\" },\n      { internalType: \"address\", name: \"token\", type: \"address\" }\n    ],\n    name: \"vaultAllowance\",\n    outputs: [{ internalType: \"uint256\", name: \"amount\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }\n];\nvar A = /* @__PURE__ */ ((e) => (e.Base = \"BASE\", e.Asset = \"ASSET\", e))(A || {}), c = /* @__PURE__ */ ((e) => (e.THOR = \"THOR\", e.RUNE = \"RUNE\", e[\"RUNE-67C\"] = \"RUNE-67C\", e[\"RUNE-B1A\"] = \"RUNE-B1A\", e.ATOM = \"ATOM\", e.MUON = \"MUON\", e.USDC = \"USDC\", e))(c || {}), i = /* @__PURE__ */ ((e) => (e.VALIDATION_ERROR = \"VALIDATION_ERROR\", e.REQUEST_PARAMETER_ERROR = \"REQUEST_PARAMETER_ERROR\", e.RESPONSE_PARSING_ERROR = \"RESPONSE_PARSING_ERROR\", e.UNHANDLED_ERROR = \"UNHANDLED_ERROR\", e.INCOMPATIBLE_ASSETS_OPERATIONS = \"INCOMPATIBLE_ASSETS_OPERATIONS\", e.SERVICE_UNAVAILABLE = \"SERVICE_UNAVAILABLE\", e.UNSUPPORTED_ASSET = \"UNSUPPORTED_ASSET\", e.MISSING_INBOUND_INFO = \"MISSING_INBOUND_INFO\", e.QUOTE_FETCHING_ERROR = \"QUOTE_FETCHING_ERROR\", e.AIRDROP_ERROR = \"AIRDROP_ERROR\", e))(i || {}), S = /* @__PURE__ */ ((e) => (e.HEALTH_CONTROLLER = \"1000\", e.LIQUIDITY_CONTROLLER = \"1001\", e.PROVIDER_CONTROLLER = \"1002\", e.QUOTE_CONTROLLER = \"1003\", e.SWAP_CONTROLLER = \"1004\", e.UTIL_CONTROLLER = \"1005\", e.AIRDROP_CONTROLLER = \"1006\", e.PROVIDER_ENTITY = \"2000\", e.THORCHAIN_PROVIDER = \"3000\", e.PROVIDER_UTIL = \"4000\", e.AIRDROP_UTIL = \"6000\", e))(S || {}), N = /* @__PURE__ */ ((e) => (e.INVALID_INPUT_PARAMETERS = \"1000\", e.UNKNOWN_PROVIDERS = \"1001\", e.CANNOT_FIND_INBOUND_ADDRESS = \"1002\", e.NO_INBOUND_ADDRESSES = \"1003\", e.CHAIN_HALTED_OR_UNSUPPORTED = \"1004\", e.MISSING_INPUT_PARAMETER = \"1005\", e.SELL_AMOUNT_MUST_BE_POSITIVE_INTEGER = \"2000\", e.SELL_BUY_ASSETS_ARE_THE_SAME = \"2001\", e.MISSING_SOURCE_ADDRESS_FOR_SYNTH = \"2002\", e.AFF_ADDRESS_AND_BPS_OR_NEITHER = \"2003\", e.AFF_ADDRESS_TOO_LONG = \"2004\", e.AFF_BPS_INTEGER_0_100 = \"2005\", e.SOURCE_ADDRESS_INVALID_FOR_SELL_CHAIN = \"2006\", e.DESTINATION_ADDRESS_INVALID_FOR_BUY_CHAIN = \"2007\", e.PREFERRED_PROFVIDER_NOT_SUPPORTED = \"2008\", e.DESTINATION_ADDRESS_SMART_CONTRACT = \"2009\", e.INVALID_PROVIDER = \"2100\", e.MISSING_CROSS_CHAIN_PROVIDER = \"2101\", e.MISSING_AVAX_PROVIDER = \"2102\", e.MISSING_BSC_PROVIDER = \"2103\", e.MISSING_ETH_PROVIDER = \"2104\", e.INVALID_PROVIDER_FOR_SWAP_OUT = \"2105\", e.INVALID_CHAIN = \"2200\", e.INVALID_ASSET = \"2201\", e.INVALID_ASSET_IDENTIFIER = \"2202\", e.UNSUPPORTED_ASSET = \"2203\", e.UNSUPPORTED_CHAIN = \"2204\", e.UNSUPPORTED_ASSET_FOR_SWAPOUT = \"2205\", e.THORNODE_QUOTE_GENERIC_ERROR = \"3000\", e.NOT_ENOUGH_SYNTH_BALANCE = \"3001\", e.SYNTH_MINTING_CAP_REACHED = \"3002\", e.ADDRESS_NOT_WHITELISTED = \"6000\", e.ADDRESS_ALREADY_CLAIMED = \"6001\", e))(N || {});\nclass p extends Error {\n  constructor({\n    status: t,\n    module: d,\n    code: u,\n    message: s,\n    type: r,\n    options: { shouldLog: y, shouldThrow: o, shouldTrace: T } = {}\n  }) {\n    super(s);\n    a(this, \"status\");\n    a(this, \"module\");\n    a(this, \"code\");\n    a(this, \"type\");\n    a(this, \"message\");\n    a(this, \"stack\");\n    a(this, \"options\");\n    this.status = t, this.module = d, this.message = s, this.code = u, this.type = r || i.UNHANDLED_ERROR, this.options = {\n      shouldLog: y || !0,\n      shouldTrace: T || !0,\n      shouldThrow: o || !0\n    }, this.options.shouldTrace && Error.captureStackTrace(this);\n  }\n  static fromErrorInfo(t) {\n    return new p(t);\n  }\n  identifier() {\n    return `${this.module}-${this.code}`;\n  }\n  handle() {\n    const t = `[${this.type}.${this.module}]: ${this.message}`;\n    if (this.options.shouldLog && console.error(t, `\n`, this.stack || \"\"), this.options.shouldThrow)\n      throw Error(t, { cause: this.stack });\n    return this.returnErrorInfo();\n  }\n  returnErrorInfo() {\n    return { ...this, identifier: this.identifier() };\n  }\n}\nvar E = /* @__PURE__ */ ((e) => (e.Avalanche = \"AVAX\", e.Binance = \"BNB\", e.BinanceSmartChain = \"BSC\", e.Bitcoin = \"BTC\", e.BitcoinCash = \"BCH\", e.Cosmos = \"GAIA\", e.Doge = \"DOGE\", e.Ethereum = \"ETH\", e.Litecoin = \"LTC\", e.THORChain = \"THOR\", e))(E || {});\nconst w = [\n  \"THOR\",\n  \"AVAX\",\n  \"BTC\",\n  \"ETH\",\n  \"BNB\",\n  \"BSC\",\n  \"GAIA\",\n  \"DOGE\",\n  \"BCH\",\n  \"LTC\"\n  /* Litecoin */\n];\nvar I = /* @__PURE__ */ ((e) => (e.AVAX = \"0x0000000000000000000000000000000000000000\", e.ETH = \"0x0000000000000000000000000000000000000000\", e.BSC = \"0x0000000000000000000000000000000000000000\", e.USDC_SPL_MINT_ADDRESS = \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\", e.USDC_SPL_TESTNET_MINT_ADDRESS = \"6TEqT62wq5mbKQPubX9eFeNJRYXRJd79Hk51pZk7nZrB\", e))(I || {}), f = /* @__PURE__ */ ((e) => (e.Mainnet = \"mainnet\", e.Testnet = \"testnet\", e))(f || {}), h = /* @__PURE__ */ ((e) => (e[e.Ethereum = 60] = \"Ethereum\", e[e.Binance = 714] = \"Binance\", e[e.THORChain = 931] = \"THORChain\", e))(h || {}), _ = /* @__PURE__ */ ((e) => (e.AVAX = \"m/44'/60'/0'/0\", e.BCH = \"m/44'/145'/0'/0\", e.BNB = \"m/44'/714'/0'/0\", e.BSC = \"m/44'/60'/0'/0\", e.BTC = \"m/84'/0'/0'/0\", e.DOGE = \"m/44'/3'/0'/0\", e.ETH = \"m/44'/60'/0'/0\", e.GAIA = \"m/44'/118'/0'/0\", e.LTC = \"m/84'/2'/0'/0\", e.THOR = \"m/44'/931'/0'/0\", e))(_ || {});\nconst P = {\n  AVAX: [44, 60, 0, 0, 0],\n  BCH: [84, 145, 0, 0, 0],\n  BNB: [44, 714, 0, 0, 0],\n  BSC: [44, 60, 0, 0, 0],\n  BTC: [84, 0, 0, 0, 0],\n  DOGE: [44, 3, 0, 0, 0],\n  ETH: [44, 60, 0, 0, 0],\n  GAIA: [44, 118, 0, 0, 0],\n  LTC: [84, 2, 0, 0, 0],\n  THOR: [44, 931, 0, 0, 0]\n};\nvar g = /* @__PURE__ */ ((e) => (e[e.AVAX = 18] = \"AVAX\", e[e.BCH = 8] = \"BCH\", e[e.BNB = 8] = \"BNB\", e[e.BSC = 18] = \"BSC\", e[e.BTC = 8] = \"BTC\", e[e.DOGE = 8] = \"DOGE\", e[e.ETH = 18] = \"ETH\", e[e.GAIA = 6] = \"GAIA\", e[e.LTC = 8] = \"LTC\", e[e.THOR = 8] = \"THOR\", e))(g || {}), b = /* @__PURE__ */ ((e) => (e.Avalanche = \"43114\", e.AvalancheHex = \"0xa86a\", e.Binance = \"Binance-Chain-Tigris\", e.BinanceSmartChain = \"56\", e.Bitcoin = \"bitcoin\", e.Bitcoincash = \"bitcoincash\", e.Cosmos = \"cosmoshub-4\", e.Dogecoin = \"dogecoin\", e.Ethereum = \"1\", e.EthereumHex = \"0x1\", e.Litecoin = \"litecoin\", e.Thorchain = \"thorchain-mainnet-v1\", e.ThorchainStagenet = \"thorchain-stagenet-v2\", e))(b || {}), B = /* @__PURE__ */ ((e) => (e.Avalanche = \"https://node-router.thorswap.net/avalanche-c\", e.BinanceSmartChain = \"https://bsc-dataseed.binance.org\", e.Cosmos = \"https://node-router.thorswap.net/cosmos/rpc\", e.Ethereum = \"https://node-router.thorswap.net/ethereum\", e.Litecoin = \"https://node-router.thorswap.net/litecoin\", e.Bitcoin = \"https://node-router.thorswap.net/bitcoin\", e.Dogecoin = \"https://node-router.thorswap.net/dogecoin\", e.BitcoinCash = \"https://node-router.thorswap.net/bitcoin-cash\", e))(B || {}), x = /* @__PURE__ */ ((e) => (e.Thorswap = \"https://api.thorswap.finance\", e))(x || {});\nconst R = {\n  AVAX: \"https://node-router.thorswap.net/avalanche-c\",\n  BSC: \"https://bsc-dataseed.binance.org\",\n  ETH: \"https://node-router.thorswap.net/ethereum\",\n  GAIA: \"https://node-router.thorswap.net/cosmos/rpc\",\n  LTC: \"https://node-router.thorswap.net/litecoin\",\n  BTC: \"https://node-router.thorswap.net/bitcoin\",\n  DOGE: \"https://node-router.thorswap.net/dogecoin\",\n  BCH: \"https://node-router.thorswap.net/bitcoin-cash\"\n  /* BitcoinCash */\n}, D = {\n  AVAX: \"43114\",\n  BNB: \"Binance-Chain-Tigris\",\n  BSC: \"56\",\n  BTC: \"bitcoin\",\n  BCH: \"bitcoincash\",\n  GAIA: \"cosmoshub-4\",\n  DOGE: \"dogecoin\",\n  ETH: \"1\",\n  LTC: \"litecoin\",\n  THOR: \"thorchain-mainnet-v1\"\n  /* Thorchain */\n}, F = {\n  AVAX: \"0xa86a\",\n  BNB: \"Binance-Chain-Tigris\",\n  BSC: \"56\",\n  BTC: \"bitcoin\",\n  BCH: \"bitcoincash\",\n  GAIA: \"cosmoshub-4\",\n  DOGE: \"dogecoin\",\n  ETH: \"0x1\",\n  LTC: \"litecoin\",\n  THOR: \"thorchain-mainnet-v1\"\n  /* Thorchain */\n}, X = {\n  [\n    \"0xa86a\"\n    /* AvalancheHex */\n  ]: \"AVAX\",\n  [\n    43114\n    /* Avalanche */\n  ]: \"AVAX\",\n  [\n    \"Binance-Chain-Tigris\"\n    /* Binance */\n  ]: \"BNB\",\n  [\n    56\n    /* BinanceSmartChain */\n  ]: \"BSC\",\n  bitcoin: \"BTC\",\n  bitcoincash: \"BCH\",\n  [\n    \"cosmoshub-4\"\n    /* Cosmos */\n  ]: \"GAIA\",\n  dogecoin: \"DOGE\",\n  [\n    \"0x1\"\n    /* EthereumHex */\n  ]: \"ETH\",\n  [\n    1\n    /* Ethereum */\n  ]: \"ETH\",\n  litecoin: \"LTC\",\n  [\n    \"thorchain-mainnet-v1\"\n    /* Thorchain */\n  ]: \"THOR\",\n  [\n    \"thorchain-stagenet-v2\"\n    /* ThorchainStagenet */\n  ]: \"THOR\"\n  /* THORChain */\n};\nvar L = /* @__PURE__ */ ((e) => (e[e.NoError = 36864] = \"NoError\", e))(L || {});\nconst K = \"image rally need wedding health address purse army antenna leopard sea gain\";\nvar H = /* @__PURE__ */ ((e) => (e[e.NotInstalled = 0] = \"NotInstalled\", e[e.Detected = 1] = \"Detected\", e))(H || {}), v = /* @__PURE__ */ ((e) => (e.Average = \"average\", e.Fast = \"fast\", e.Fastest = \"fastest\", e))(v || {}), C = /* @__PURE__ */ ((e) => (e.FlatFee = \"base\", e.PerByte = \"byte\", e))(C || {}), V = /* @__PURE__ */ ((e) => (e.KEYSTORE = \"KEYSTORE\", e.XDEFI = \"XDEFI\", e.METAMASK = \"METAMASK\", e.COINBASE_WEB = \"COINBASE_WEB\", e.TREZOR = \"TREZOR\", e.TRUSTWALLET = \"TRUSTWALLET\", e.TRUSTWALLET_WEB = \"TRUSTWALLET_WEB\", e.LEDGER = \"LEDGER\", e.KEPLR = \"KEPLR\", e.BRAVE = \"BRAVE\", e.WALLETCONNECT = \"WALLETCONNECT\", e))(V || {});\nexport {\n  p as ApiError,\n  x as ApiUrl,\n  c as AssetSymbol,\n  g as BaseDecimal,\n  E as Chain,\n  b as ChainId,\n  X as ChainIdToChain,\n  D as ChainToChainId,\n  F as ChainToHexChainId,\n  R as ChainToRPC,\n  I as ContractAddress,\n  A as Denomination,\n  _ as DerivationPath,\n  N as ERROR_CODE,\n  S as ERROR_MODULE,\n  i as ERROR_TYPE,\n  L as ErrorCode,\n  v as FeeOption,\n  C as FeeType,\n  K as MOCK_PHRASE,\n  f as Network,\n  P as NetworkDerivationPath,\n  h as NetworkId,\n  B as RPCUrl,\n  w as SUPPORTED_CHAINS,\n  G as TCAvalancheDepositABI,\n  U as TCEthereumVaultAbi,\n  V as WalletOption,\n  H as WalletStatus,\n  O as erc20ABI\n};\n//# sourceMappingURL=index.es.js.map\n","import { Chain } from '@thorswap-lib/types';\nimport type { BigNumber } from 'bignumber.js';\n\nexport const getAssetType = (chain: Chain, ticker: string, isSynth = false) => {\n  if (isSynth) return 'Synth';\n\n  switch (chain) {\n    case Chain.Bitcoin:\n    case Chain.BitcoinCash:\n    case Chain.Doge:\n    case Chain.Litecoin:\n    case Chain.THORChain:\n      return 'Native';\n    case Chain.Cosmos:\n      return ticker === 'ATOM' ? 'Native' : 'GAIA';\n    case Chain.Binance:\n      return ticker === 'BNB' ? 'Native' : 'BEP2';\n    case Chain.BinanceSmartChain:\n      return ticker === 'BNB' ? 'Native' : 'BEP20';\n    case Chain.Ethereum:\n      return ticker === 'ETH' ? 'Native' : 'ERC20';\n    case Chain.Avalanche:\n      return ticker === 'AVAX' ? 'Native' : 'AVAX';\n    default:\n      return chain;\n  }\n};\n\nexport const BN_FORMAT: BigNumber.Format = {\n  prefix: '',\n  decimalSeparator: '.',\n  groupSeparator: ',',\n  groupSize: 3,\n  secondaryGroupSize: 0,\n  fractionGroupSeparator: ' ',\n  fractionGroupSize: 0,\n  suffix: '',\n};\n","import { BaseDecimal } from '@thorswap-lib/types';\nimport { BigNumber } from 'bignumber.js';\n\nimport { BN_FORMAT } from '../helpers/asset.js';\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP,\n}\n\nexport enum AmountType {\n  BASE_AMOUNT,\n  ASSET_AMOUNT,\n}\n\nconst roundingMode = {\n  [Rounding.ROUND_DOWN]: BigNumber.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: BigNumber.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: BigNumber.ROUND_UP,\n};\n\nexport const EMPTY_FORMAT: BigNumber.Format = {\n  groupSeparator: '',\n  decimalSeparator: '.',\n};\n\nexport class Amount {\n  public readonly assetAmount: BigNumber;\n  public readonly baseAmount: BigNumber;\n  public readonly decimal: number;\n\n  public static fromMidgard(amount?: BigNumber.Value) {\n    return new Amount(amount || 0, AmountType.BASE_AMOUNT, BaseDecimal.THOR);\n  }\n\n  public static fromBaseAmount(amount: BigNumber.Value, decimal: number) {\n    return new Amount(amount, AmountType.BASE_AMOUNT, decimal);\n  }\n\n  public static fromAssetAmount(amount: BigNumber.Value, decimal: number) {\n    return new Amount(amount, AmountType.ASSET_AMOUNT, decimal);\n  }\n\n  public static fromNormalAmount(amount?: BigNumber.Value) {\n    return new Amount(amount || 0, AmountType.ASSET_AMOUNT, 1);\n  }\n\n  public static sorter(a: Amount, b: Amount) {\n    if (a.decimal !== b.decimal) throw new Error('Decimal must be same');\n\n    return a.assetAmount.minus(b.assetAmount).toNumber();\n  }\n\n  constructor(amount: BigNumber.Value, type: AmountType = AmountType.BASE_AMOUNT, decimal: number) {\n    this.decimal = decimal;\n    const decimalAmount = 10 ** decimal;\n\n    if (type === AmountType.BASE_AMOUNT) {\n      this.baseAmount = new BigNumber(amount);\n      this.assetAmount = this.baseAmount.dividedBy(decimalAmount);\n    } else {\n      this.assetAmount = new BigNumber(amount);\n      this.baseAmount = this.assetAmount.multipliedBy(decimalAmount);\n    }\n\n    // remove decimal points for baseAmount\n    this.baseAmount = new BigNumber(this.baseAmount.integerValue(BigNumber.ROUND_DOWN));\n  }\n\n  add(amount: Amount) {\n    return new Amount(\n      this.assetAmount.plus(amount.assetAmount),\n      AmountType.ASSET_AMOUNT,\n      this.decimal,\n    );\n  }\n\n  sub(amount: Amount) {\n    return new Amount(\n      this.assetAmount.minus(amount.assetAmount),\n      AmountType.ASSET_AMOUNT,\n      this.decimal,\n    );\n  }\n\n  mul(value: BigNumber.Value | Amount) {\n    if (value instanceof Amount) {\n      return new Amount(\n        this.assetAmount.multipliedBy(value.assetAmount),\n        AmountType.ASSET_AMOUNT,\n        this.decimal,\n      );\n    }\n    return new Amount(this.assetAmount.multipliedBy(value), AmountType.ASSET_AMOUNT, this.decimal);\n  }\n\n  div(value: BigNumber.Value | Amount) {\n    if (value instanceof Amount) {\n      return new Amount(\n        this.assetAmount.dividedBy(value.assetAmount),\n        AmountType.ASSET_AMOUNT,\n        this.decimal,\n      );\n    }\n    return new Amount(this.assetAmount.dividedBy(value), AmountType.ASSET_AMOUNT, this.decimal);\n  }\n\n  gte(amount: Amount | BigNumber.Value) {\n    if (amount instanceof Amount) {\n      return this.assetAmount.isGreaterThanOrEqualTo(amount.assetAmount);\n    }\n\n    return this.assetAmount.isGreaterThanOrEqualTo(amount);\n  }\n\n  gt(amount: Amount | BigNumber.Value) {\n    if (amount instanceof Amount) {\n      return this.assetAmount.isGreaterThan(amount.assetAmount);\n    }\n\n    return this.assetAmount.isGreaterThan(amount);\n  }\n\n  lte(amount: Amount | BigNumber.Value) {\n    if (amount instanceof Amount) {\n      return this.assetAmount.isLessThanOrEqualTo(amount.assetAmount);\n    }\n\n    return this.assetAmount.isLessThanOrEqualTo(amount);\n  }\n\n  lt(amount: Amount | BigNumber.Value) {\n    if (amount instanceof Amount) {\n      return this.assetAmount.isLessThan(amount.assetAmount);\n    }\n\n    return this.assetAmount.isLessThan(amount);\n  }\n\n  eq(amount: Amount | BigNumber.Value) {\n    if (amount instanceof Amount) {\n      return this.assetAmount.isEqualTo(amount.assetAmount);\n    }\n\n    return this.assetAmount.isEqualTo(amount);\n  }\n\n  toSignificant(\n    significantDigits = 8,\n    maxDecimals = 8,\n    format: BigNumber.Format = BN_FORMAT,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ) {\n    return this.toSignificantBigNumber(significantDigits, format, rounding)\n      .decimalPlaces(maxDecimals)\n      .toFormat();\n  }\n\n  toFixedDecimal(\n    decimalPlaces = 8,\n    format: BigNumber.Format = EMPTY_FORMAT,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ) {\n    if (!Number.isInteger(decimalPlaces)) throw new Error(`${decimalPlaces} is not an integer.`);\n    if (decimalPlaces <= 0) throw new Error(`${decimalPlaces} is not positive.`);\n\n    BigNumber.config({ FORMAT: format });\n    const fixed = new BigNumber(this.assetAmount.toFixed(decimalPlaces, roundingMode[rounding]));\n\n    return fixed.toFormat();\n  }\n\n  toFixed(\n    decimalPlaces = 8,\n    format: BigNumber.Format = BN_FORMAT,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ) {\n    return this.toFixedDecimal(decimalPlaces, format, rounding);\n  }\n\n  toAbbreviate(decimalPlaces = 2) {\n    let newValue = this.assetAmount.toNumber();\n    const suffixes = ['', 'K', 'M', 'B', 'T', 'Q', 'Q', 's'];\n    let suffixNum = 0;\n\n    while (newValue >= 1000) {\n      newValue /= 1000;\n      suffixNum++;\n    }\n\n    return `${newValue.toFixed(decimalPlaces)}${suffixNum > 0 ? ` ${suffixes[suffixNum]}` : ''}`;\n  }\n\n  private toSignificantBigNumber(\n    significantDigits = 8,\n    format: BigNumber.Format = BN_FORMAT,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ) {\n    if (!Number.isInteger(significantDigits))\n      throw new Error(`${significantDigits} is not an integer.`);\n    if (significantDigits <= 0) throw new Error(`${significantDigits} is not positive.`);\n\n    BigNumber.config({ FORMAT: format });\n\n    return new BigNumber(this.assetAmount.toPrecision(significantDigits, roundingMode[rounding]));\n  }\n}\n\nexport const formatBigNumber = (\n  bn: BigNumber,\n  decimalPlaces = 8,\n  rounding: Rounding = Rounding.ROUND_DOWN,\n) => {\n  BigNumber.config({ FORMAT: BN_FORMAT });\n  const fixed = new BigNumber(bn.toFixed(decimalPlaces, roundingMode[rounding]));\n\n  return fixed.toFormat();\n};\n","import { BaseDecimal } from '@thorswap-lib/types';\n\nimport { Amount } from '../entities/amount.js';\n\ntype ShareParams<T = {}> = T & {\n  liquidityUnits: string;\n  poolUnits: string;\n};\n\ntype PoolParams<T = {}> = T & {\n  runeAmount: string;\n  assetAmount: string;\n  runeDepth: string;\n  assetDepth: string;\n};\n\n// formula: Total Balance * liquidity Units / total Units\nexport const getRuneShare = ({\n  liquidityUnits,\n  poolUnits,\n  runeDepth,\n}: ShareParams<{ runeDepth: string }>) =>\n  Amount.fromBaseAmount(runeDepth, BaseDecimal.THOR).mul(liquidityUnits).div(poolUnits);\n\nexport const getAssetShare = ({\n  liquidityUnits,\n  poolUnits,\n  assetDepth,\n}: ShareParams<{ assetDepth: string }>) =>\n  Amount.fromBaseAmount(assetDepth, BaseDecimal.THOR).mul(liquidityUnits).div(poolUnits);\n\n/**\n *  Ref: https://gitlab.com/thorchain/thornode/-/issues/657\n *  share = (s * A * (2 * T^2 - 2 * T * s + s^2))/T^3\n *  s = stakeUnits for member (after factoring in withdrawBasisPoints)\n *  T = totalPoolUnits for pool\n *  A = assetDepth to be withdrawn\n *\n *  Formula:\n *  share = (s * A * (2 * T^2 - 2 * T * s + s^2))/T^3\n *  (part1 * (part2 - part3 + part4)) / part5\n */\nexport const getAsymmetricRuneShare = ({\n  liquidityUnits,\n  poolUnits,\n  runeDepth,\n}: ShareParams<{ runeDepth: string }>) => {\n  const s = Amount.fromMidgard(liquidityUnits);\n  const T = Amount.fromBaseAmount(poolUnits, BaseDecimal.THOR);\n  const A = Amount.fromBaseAmount(runeDepth, BaseDecimal.THOR);\n\n  const part1 = s.mul(A);\n  const part2 = T.mul(T).mul(2);\n  const part3 = T.mul(s).mul(2);\n  const part4 = s.mul(s);\n  const part5 = T.mul(T).mul(T);\n\n  const numerator = part1.mul(part2.sub(part3).add(part4));\n  const amount = numerator.div(part5);\n\n  return amount;\n};\n\nexport const getAsymmetricAssetShare = ({\n  liquidityUnits,\n  poolUnits,\n  assetDepth,\n}: ShareParams<{ assetDepth: string }>) => {\n  const s = Amount.fromMidgard(liquidityUnits);\n  const T = Amount.fromBaseAmount(poolUnits, BaseDecimal.THOR);\n  const A = Amount.fromBaseAmount(assetDepth, BaseDecimal.THOR);\n\n  const part1 = s.mul(A);\n  const part2 = T.mul(T).mul(2);\n  const part3 = T.mul(s).mul(2);\n  const part4 = s.mul(s);\n  const numerator = part1.mul(part2.sub(part3).add(part4));\n  const part5 = T.mul(T).mul(T);\n\n  const amount = numerator.div(part5);\n\n  return amount;\n};\n\nexport const getAsymmetricRuneWithdrawAmount = ({\n  percent,\n  runeDepth,\n  liquidityUnits,\n  poolUnits,\n}: ShareParams<{ percent: number; runeDepth: string }>) =>\n  getAsymmetricRuneShare({ runeDepth, liquidityUnits, poolUnits }).mul(percent);\n\nexport const getAsymmetricAssetWithdrawAmount = ({\n  percent,\n  assetDepth,\n  liquidityUnits,\n  poolUnits,\n}: ShareParams<{ percent: number; assetDepth: string }>) =>\n  getAsymmetricAssetShare({ assetDepth, liquidityUnits, poolUnits }).mul(percent);\n\nexport const getSymmetricWithdraw = ({\n  liquidityUnits,\n  poolUnits,\n  runeDepth,\n  assetDepth,\n  percent,\n}: ShareParams<{\n  runeDepth: string;\n  assetDepth: string;\n  percent: number;\n}>) => ({\n  assetAmount: getAssetShare({ liquidityUnits, poolUnits, assetDepth }).mul(percent),\n  runeAmount: getRuneShare({ liquidityUnits, poolUnits, runeDepth }).mul(percent),\n});\n\nexport const getEstimatedPoolShare = ({\n  runeDepth,\n  poolUnits,\n  assetDepth,\n  liquidityUnits,\n  runeAmount,\n  assetAmount,\n}: ShareParams<{\n  runeAmount: string;\n  assetAmount: string;\n  runeDepth: string;\n  assetDepth: string;\n}>) => {\n  const R = Amount.fromBaseAmount(runeDepth, BaseDecimal.THOR);\n  const A = Amount.fromBaseAmount(assetDepth, BaseDecimal.THOR);\n  const P = Amount.fromBaseAmount(poolUnits, BaseDecimal.THOR);\n  const runeAddAmount = Amount.fromBaseAmount(runeAmount, BaseDecimal.THOR);\n  const assetAddAmount = Amount.fromBaseAmount(assetAmount, BaseDecimal.THOR);\n\n  // liquidityUnits = P * (r*A + a*R + 2*r*a) / (r*A + a*R + 2*R*A)\n  const rA = runeAddAmount.mul(A);\n  const aR = assetAddAmount.mul(R);\n  const ra = runeAddAmount.mul(assetAddAmount);\n  const RA = R.mul(A);\n  const numerator = P.mul(rA.add(aR.add(ra.mul(2))));\n  const denominator = rA.add(aR.add(RA.mul(2)));\n  const liquidityUnitsAfterAdd = numerator.div(denominator);\n  const estimatedLiquidityUnits = Amount.fromMidgard(liquidityUnits).add(liquidityUnitsAfterAdd);\n\n  // get pool units after add\n  const newPoolUnits = P.add(estimatedLiquidityUnits);\n\n  return estimatedLiquidityUnits.div(newPoolUnits).assetAmount.toNumber();\n};\n\nexport const getLiquiditySlippage = ({\n  runeAmount,\n  assetAmount,\n  runeDepth,\n  assetDepth,\n}: PoolParams) => {\n  // formula: (t * R - T * r)/ (T*r + R*T)\n  const R = Amount.fromBaseAmount(runeDepth, BaseDecimal.THOR);\n  const T = Amount.fromBaseAmount(assetDepth, BaseDecimal.THOR);\n  const assetAddAmount = Amount.fromBaseAmount(assetAmount, BaseDecimal.THOR);\n  const runeAddAmount = Amount.fromBaseAmount(runeAmount, BaseDecimal.THOR);\n\n  const numerator = assetAddAmount.mul(R).sub(T.mul(runeAddAmount));\n  const denominator = T.mul(runeAddAmount).add(R.mul(T));\n\n  // set absolute value of percent, no negative allowed\n  return numerator.div(denominator).assetAmount.absoluteValue().toNumber();\n};\n","import { Chain } from '@thorswap-lib/types';\n\nexport enum MemoType {\n  BOND = 'BOND',\n  DEPOSIT = '+',\n  LEAVE = 'LEAVE',\n  THORNAME_REGISTER = '~',\n  UNBOND = 'UNBOND',\n  UPGRADE = 'SWITCH',\n  WITHDRAW = '-',\n  OPEN_LOAN = '$+',\n  CLOSE_LOAN = '$-',\n}\n\nexport type ThornameRegisterParam = {\n  name: string;\n  chain: string;\n  address: string;\n  owner?: string;\n  preferredAsset?: string;\n  expiryBlock?: string;\n};\n\nconst getShortenedSymbol = ({\n  symbol,\n  ticker,\n  chain,\n}: {\n  ticker: string;\n  symbol: string;\n  chain: string | Chain;\n}) => (chain === 'ETH' && ticker !== 'ETH' ? `${ticker}-${symbol.slice(-3)}` : symbol);\n\ntype WithAddress<T = {}> = T & { address: string };\ntype WithChain<T = {}> = T & { chain: Chain };\n\nexport type MemoOptions<T extends MemoType> = {\n  [MemoType.BOND]: WithAddress;\n  [MemoType.LEAVE]: WithAddress;\n  [MemoType.UPGRADE]: WithAddress;\n  [MemoType.CLOSE_LOAN]: WithAddress<{ asset: string; minAmount?: string }>;\n  [MemoType.OPEN_LOAN]: WithAddress<{ asset: string; minAmount?: string }>;\n  [MemoType.UNBOND]: WithAddress<{ unbondAmount: number }>;\n  [MemoType.DEPOSIT]: WithChain<{ symbol: string; address?: string; singleSide?: boolean }>;\n  [MemoType.WITHDRAW]: WithChain<{\n    ticker: string;\n    symbol: string;\n    basisPoints: number;\n    targetAssetString?: string;\n    singleSide?: boolean;\n  }>;\n  [MemoType.THORNAME_REGISTER]: Omit<ThornameRegisterParam, 'preferredAsset' | 'expiryBlock'>;\n}[T];\n\nexport const getMemoFor = <T extends MemoType>(memoType: T, options: MemoOptions<T>) => {\n  switch (memoType) {\n    case MemoType.LEAVE:\n    case MemoType.UPGRADE:\n    case MemoType.BOND: {\n      const { address } = options as MemoOptions<MemoType.BOND>;\n      return `${memoType}:${address}`;\n    }\n\n    case MemoType.UNBOND: {\n      const { address, unbondAmount } = options as MemoOptions<MemoType.UNBOND>;\n      return `${memoType}:${address}:${unbondAmount * 10 ** 8}`;\n    }\n\n    case MemoType.THORNAME_REGISTER: {\n      const { name, chain, address, owner } = options as MemoOptions<MemoType.THORNAME_REGISTER>;\n      return `${memoType}:${name}:${chain}:${address}${owner ? `:${owner}` : ''}`;\n    }\n\n    case MemoType.DEPOSIT: {\n      const { chain, symbol, address, singleSide } = options as MemoOptions<MemoType.DEPOSIT>;\n\n      return singleSide\n        ? `${memoType}:${chain}/${symbol}::t:0`\n        : `${memoType}:${chain}.${symbol}${address ? `:${address}` : ''}`;\n    }\n\n    case MemoType.WITHDRAW: {\n      const { chain, ticker, symbol, basisPoints, targetAssetString, singleSide } =\n        options as MemoOptions<MemoType.WITHDRAW>;\n\n      const target = !singleSide && targetAssetString ? `:${targetAssetString}` : '';\n      const shortenedSymbol = getShortenedSymbol({ chain, symbol, ticker });\n      const assetDivider = singleSide ? '/' : '.';\n\n      return `${memoType}:${chain}${assetDivider}${shortenedSymbol}:${basisPoints}${target}`;\n    }\n\n    case MemoType.OPEN_LOAN:\n    case MemoType.CLOSE_LOAN: {\n      const { asset, address } = options as MemoOptions<MemoType.OPEN_LOAN>;\n\n      return `${memoType}:${asset}:${address}`; //:${minAmount ? `${minAmount}` : ''}:t:0`;\n    }\n\n    default:\n      return '';\n  }\n};\n","import { Chain } from '@thorswap-lib/types';\n\nexport const getNetworkName = (chain: Chain, ticker: string) => {\n  if (chain === Chain.Bitcoin) return 'Bitcoin';\n  if (chain === Chain.Doge) return 'Dogecoin';\n  if (chain === Chain.Litecoin) return 'Litecoin';\n  if (chain === Chain.BitcoinCash) return 'Bitcoin Cash';\n\n  if (chain === Chain.Ethereum && ticker === 'ETH') {\n    return 'Ethereum';\n  }\n\n  return ticker;\n};\n","// 10 rune for register, 1 rune per year\n// MINIMUM_REGISTRATION_FEE = 11\nexport const getTHORNameCost = (year: number) => {\n  if (year < 0) throw new Error('Invalid number of year');\n  return 10 + year;\n};\n\nexport const validateTHORName = (name: string) => {\n  if (name.length > 30) return false;\n\n  const regex = /^[a-zA-Z0-9+_-]+$/g;\n\n  return !!name.match(regex);\n};\n","import { AssetSymbol, BaseDecimal, Chain } from '@thorswap-lib/types';\n\nimport { getAssetType, getNetworkName } from '../helpers/index.js';\n\n/**\n * L1 asset format:\n * - CHAIN.SYMBOL (Raw string, URL)\n * Synth asset format: CHAIN/SYMBOL\n * - CHAIN/SYMBOL (Raw string)\n * - THOR.CHAIN.SYMBOL (URL)\n */\n\nexport class AssetEntity {\n  public readonly chain: Chain;\n  public readonly symbol: string;\n  public readonly ticker: string;\n  public readonly type: string;\n  public readonly network: string;\n  public readonly name: string;\n  public decimal: number;\n  public isSynth = false;\n  public L1Chain: Chain;\n\n  public static fromAssetString(asset?: string) {\n    if (!asset) return null;\n\n    const isSynth = asset.includes('/');\n    const [chain, ...symbolArray] = asset.split(isSynth ? '/' : '.');\n    const symbol = symbolArray.join('.');\n    const ticker = symbol?.split('-')?.[0];\n    const canCreateAsset = chain && symbol && ticker;\n\n    return canCreateAsset ? new AssetEntity(chain as Chain, symbol, isSynth) : null;\n  }\n\n  /**\n   *\n   * @param urlEncodedAsset asset string from url\n   * @returns btc.btc -> btc.btc, thor.btc.btc -> btc/btc\n   */\n  public static decodeFromURL = (urlEncodedAsset: string) => {\n    let assetString = urlEncodedAsset.toUpperCase();\n\n    if (assetString.startsWith('THOR.') && assetString.split('THOR.')?.[1] !== 'RUNE') {\n      // synth asset\n      assetString = assetString.split('THOR.')?.[1]?.replace('.', '/');\n    }\n\n    return AssetEntity.fromAssetString(assetString);\n  };\n\n  constructor(chain: Chain, symbol: string, isSynth = false, ticker?: string) {\n    this.chain = chain;\n    this.symbol = symbol.toUpperCase();\n    this.ticker = ticker || symbol.toUpperCase().split('-')[0];\n    this.type = getAssetType(chain, this.ticker, isSynth);\n    this.name = isSynth ? `Synth ${this.ticker}` : this.ticker;\n    this.network = getNetworkName(chain, this.ticker);\n    this.decimal = isSynth ? BaseDecimal.THOR : BaseDecimal[chain];\n    this.isSynth = isSynth;\n    this.L1Chain = isSynth ? Chain.THORChain : chain;\n  }\n\n  public setDecimal = (decimal?: number) => {\n    this.decimal = decimal || BaseDecimal[this.chain] || BaseDecimal.THOR;\n  };\n\n  public getAssetObj() {\n    // synth format: THOR.btc/btc (NOTE: lowercase notation)\n    if (this.isSynth) {\n      const synthSymbol = `${this.chain.toLowerCase()}/${this.symbol.toLowerCase()}`;\n\n      return {\n        chain: Chain.THORChain,\n        symbol: synthSymbol,\n        ticker: synthSymbol,\n      };\n    }\n\n    // L1 format: BTC.BTC\n    return { chain: this.chain, symbol: this.symbol, ticker: this.ticker };\n  }\n\n  /**\n   * convert asset entity to string\n   * @returns L1 asset -> btc.btc, Synth asset -> btc/btc\n   */\n  toString() {\n    return `${this.chain}${this.isSynth ? '/' : '.'}${this.symbol}`;\n  }\n\n  toURLEncoded() {\n    return `${this.isSynth ? 'THOR.' : ''}${this.chain}.${this.symbol}`;\n  }\n\n  // full compare chain, symbol, synth\n  eq(asset: AssetEntity) {\n    return (\n      this.chain === asset.chain &&\n      this.symbol.toUpperCase() === asset.symbol.toUpperCase() &&\n      this.ticker.toUpperCase() === asset.ticker.toUpperCase() &&\n      this.isSynth === asset.isSynth\n      // this.decimal === asset.decimal\n    );\n  }\n\n  // compare chain, symbol but not synth\n  shallowEq(asset: AssetEntity) {\n    return (\n      this.chain === asset.chain &&\n      this.symbol.toUpperCase() === asset.symbol.toUpperCase() &&\n      this.ticker.toUpperCase() === asset.ticker.toUpperCase()\n    );\n  }\n\n  isRUNE() {\n    return this.eq(getSignatureAssetFor(Chain.THORChain));\n  }\n\n  identifier() {\n    return `${this.chain}.${this.symbol}`;\n  }\n\n  toSynth() {\n    if (this.isSynth) return this;\n    return new AssetEntity(Chain.THORChain, `${this.chain}/${this.symbol}`, true);\n  }\n}\n\nconst THOR_MAINNET_SYMBOL = 'THOR-0XA5F2211B9B8170F694421F2046281775E8468044';\nconst ETH_RUNE_SYMBOL = 'RUNE-0X3155BA85D5F96B2D030A4966AF206230E46849CB';\n\ntype Signature = Chain | 'USD' | 'ETH_THOR' | 'ETH_RUNE' | 'BNB_RUNE' | 'THOR';\n\n// @ts-expect-error initialized in getSignatureAssetFor\nconst cachedSignatureAssets: Record<Signature, AssetEntity> = {};\nexport const getSignatureAssetFor = (signature: Signature) => {\n  if (cachedSignatureAssets[signature]) return cachedSignatureAssets[signature];\n\n  switch (signature) {\n    case Chain.Avalanche:\n    case Chain.Binance:\n    case Chain.BitcoinCash:\n    case Chain.Bitcoin:\n    case Chain.Doge:\n    case Chain.Ethereum:\n    case Chain.Litecoin: {\n      const asset = new AssetEntity(signature, signature);\n\n      cachedSignatureAssets[signature] = asset;\n      return asset;\n    }\n\n    case Chain.BinanceSmartChain: {\n      const bscAsset = new AssetEntity(Chain.BinanceSmartChain, Chain.Binance);\n      bscAsset.setDecimal(18);\n\n      cachedSignatureAssets[signature] = bscAsset;\n      return bscAsset;\n    }\n\n    case Chain.Cosmos: {\n      const asset = new AssetEntity(Chain.Cosmos, AssetSymbol.ATOM, false, AssetSymbol.ATOM);\n\n      cachedSignatureAssets[signature] = asset;\n      return asset;\n    }\n\n    case Chain.THORChain: {\n      const asset = new AssetEntity(Chain.THORChain, AssetSymbol.RUNE, false, AssetSymbol.RUNE);\n\n      cachedSignatureAssets[signature] = asset;\n      return asset;\n    }\n\n    case 'USD': {\n      const asset = new AssetEntity(Chain.THORChain, 'USD-USD', false, 'USD-USD');\n\n      cachedSignatureAssets[signature] = asset;\n      return asset;\n    }\n\n    case 'ETH_THOR': {\n      const thorAsset = new AssetEntity(Chain.Ethereum, THOR_MAINNET_SYMBOL);\n      thorAsset.setDecimal(18);\n\n      cachedSignatureAssets[signature] = thorAsset;\n      return thorAsset;\n    }\n\n    /**\n     * Remove after KillSwitch\n     */\n    case 'BNB_RUNE': {\n      const asset = new AssetEntity(Chain.Binance, 'RUNE-B1A');\n\n      cachedSignatureAssets[signature] = asset;\n      return asset;\n    }\n\n    case 'ETH_RUNE': {\n      const ethRune = new AssetEntity(Chain.Ethereum, ETH_RUNE_SYMBOL);\n      ethRune.setDecimal(18);\n\n      cachedSignatureAssets[signature] = ethRune;\n      return ethRune;\n    }\n\n    default: {\n      return new AssetEntity(Chain.THORChain, AssetSymbol.RUNE, false, AssetSymbol.RUNE);\n    }\n  }\n};\n\nexport const isGasAsset = (asset: AssetEntity) => asset.eq(getSignatureAssetFor(asset.chain));\n","import { BigNumber } from 'bignumber.js';\n\nimport { BN_FORMAT } from '../helpers/asset.js';\n\nimport { Amount, AmountType, Rounding } from './amount.js';\nimport { AssetEntity as Asset, AssetEntity } from './asset.js';\nimport { Pool } from './pool.js';\n\nconst poolByAsset = (asset: AssetEntity, pools: Pool[]) =>\n  pools.find((pool) => asset.shallowEq(pool.asset));\n\nexport class Price extends Amount {\n  public readonly baseAsset: Asset;\n\n  public readonly quoteAsset?: Asset;\n\n  public readonly unitPrice: BigNumber;\n\n  public readonly price: BigNumber;\n\n  public readonly amount: Amount;\n\n  constructor({\n    baseAsset,\n    quoteAsset,\n    unitPrice,\n    pools,\n    priceAmount,\n  }: {\n    baseAsset: Asset;\n    quoteAsset?: Asset;\n    unitPrice?: BigNumber;\n    pools?: Pool[];\n    priceAmount?: Amount;\n  }) {\n    const amount = Amount.fromAssetAmount(\n      priceAmount ? priceAmount.assetAmount : 1,\n      baseAsset.decimal,\n    );\n\n    super(amount.assetAmount, AmountType.ASSET_AMOUNT, baseAsset.decimal);\n\n    this.amount = amount;\n    this.baseAsset = baseAsset;\n    this.quoteAsset = quoteAsset;\n\n    if (unitPrice !== undefined) {\n      this.unitPrice = unitPrice;\n      this.price = amount.assetAmount.multipliedBy(unitPrice);\n    } else {\n      if (!pools) throw new Error('Pools must be provided if unitPrice omitted');\n\n      this.unitPrice = new BigNumber(0);\n\n      // if quoteAsset is not specified OR is USD, calc the price for USD\n      if (!quoteAsset) {\n        if (!baseAsset.isRUNE()) {\n          const pool = poolByAsset(baseAsset, pools!);\n\n          if (pool) {\n            // set USD price for non-RUNE asset\n            this.unitPrice = pool.assetUSDPrice.assetAmount;\n          }\n        } else {\n          const pool = pools?.[0];\n          // set USD Price of RUNE\n          if (pool) {\n            this.unitPrice = pool.runePriceInAsset.mul(pool.assetUSDPrice).assetAmount;\n          }\n        }\n      } else if (baseAsset.isRUNE() && !quoteAsset.isRUNE()) {\n        const pool = poolByAsset(quoteAsset, pools!);\n\n        if (pool) {\n          this.unitPrice = pool.runePriceInAsset.assetAmount;\n        }\n      } else if (!baseAsset.isRUNE() && quoteAsset.isRUNE()) {\n        const pool = poolByAsset(baseAsset, pools!);\n\n        if (pool) {\n          this.unitPrice = pool.assetPriceInRune.assetAmount;\n        }\n      } else if (!baseAsset.isRUNE() && !quoteAsset.isRUNE()) {\n        const baseAssetPool = poolByAsset(baseAsset, pools!);\n        const quoteAssetPool = poolByAsset(quoteAsset, pools!);\n\n        if (baseAssetPool && quoteAssetPool) {\n          this.unitPrice = baseAssetPool.assetPriceInRune.div(\n            quoteAssetPool.assetPriceInRune,\n          ).assetAmount;\n        }\n      } else {\n        // both are RUNE\n        this.unitPrice = new BigNumber(1);\n      }\n\n      this.price = this.unitPrice.multipliedBy(amount.assetAmount);\n    }\n  }\n\n  raw() {\n    return this.price;\n  }\n\n  invert() {\n    return new BigNumber(1).dividedBy(this.raw());\n  }\n\n  toCurrencyFormat(decimalPlaces = 8, abbreviate = true) {\n    const fixedLabel = abbreviate\n      ? this.toAbbreviateRaw(decimalPlaces)\n      : this.toFixedRaw(decimalPlaces);\n\n    const isUSDBased = !this.quoteAsset || this.quoteAsset.ticker === 'USD';\n\n    return isUSDBased ? `$${fixedLabel}` : `${fixedLabel} ${this.quoteAsset?.ticker}`;\n  }\n\n  toAbbreviateRaw(decimalPlaces = 2) {\n    return Amount.fromAssetAmount(this.price, 8).toAbbreviate(decimalPlaces);\n  }\n\n  toFixedRaw(\n    decimalPlaces = 8,\n    format: BigNumber.Format = BN_FORMAT,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ) {\n    return Amount.fromAssetAmount(this.price, 8).toFixed(decimalPlaces, format, rounding);\n  }\n\n  toFixedInverted(\n    decimalPlaces = 8,\n    format: BigNumber.Format = BN_FORMAT,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ) {\n    return Amount.fromAssetAmount(this.invert(), 8).toFixed(decimalPlaces, format, rounding);\n  }\n}\n","import { Chain } from '@thorswap-lib/types';\nimport { BigNumber } from 'bignumber.js';\n\nimport { BN_FORMAT } from '../helpers/asset.js';\n\nimport { Amount, AmountType, Rounding } from './amount.js';\nimport { AssetEntity, getSignatureAssetFor } from './asset.js';\nimport { Pool } from './pool.js';\nimport { Price } from './price.js';\n\nexport class AssetAmount extends Amount {\n  public readonly asset: AssetEntity;\n\n  public readonly amount: Amount;\n\n  constructor(asset: AssetEntity, amount: Amount) {\n    super(amount.assetAmount, AmountType.ASSET_AMOUNT, asset.decimal);\n    this.asset = asset;\n\n    // make sure amount has same decimal as asset\n    this.amount = new Amount(amount.assetAmount, AmountType.ASSET_AMOUNT, asset.decimal);\n  }\n\n  add(amount: AssetAmount) {\n    if (!this.asset.shallowEq(amount.asset)) throw new Error('asset must be same');\n\n    return new AssetAmount(this.asset, this.amount.add(amount.amount));\n  }\n\n  sub(amount: AssetAmount) {\n    if (!this.asset.shallowEq(amount.asset)) throw new Error('asset must be same');\n\n    return new AssetAmount(this.asset, this.amount.sub(amount.amount));\n  }\n\n  mul(value: BigNumber.Value | Amount) {\n    let amount;\n    if (value instanceof Amount) {\n      amount = new Amount(\n        this.assetAmount.multipliedBy(value.assetAmount),\n        AmountType.ASSET_AMOUNT,\n        this.decimal,\n      );\n    } else {\n      amount = new Amount(\n        this.assetAmount.multipliedBy(value),\n        AmountType.ASSET_AMOUNT,\n        this.decimal,\n      );\n    }\n\n    return new AssetAmount(this.asset, amount);\n  }\n\n  div(value: BigNumber.Value | Amount) {\n    let amount;\n    if (value instanceof Amount) {\n      amount = new Amount(\n        this.assetAmount.dividedBy(value.assetAmount),\n        AmountType.ASSET_AMOUNT,\n        this.decimal,\n      );\n    } else {\n      amount = new Amount(this.assetAmount.dividedBy(value), AmountType.ASSET_AMOUNT, this.decimal);\n    }\n\n    return new AssetAmount(this.asset, amount);\n  }\n\n  toCurrencyFormat(\n    {\n      significantDigits,\n      format,\n      rounding,\n    }: {\n      significantDigits?: number;\n      format?: BigNumber.Format;\n      rounding?: Rounding;\n    } = {\n      significantDigits: 6,\n      format: BN_FORMAT,\n      rounding: Rounding.ROUND_DOWN,\n    },\n    isPrefix = false,\n  ) {\n    const significantValue = super.toSignificant(significantDigits, 8, format, rounding);\n\n    if (isPrefix) {\n      return `${this.asset.ticker} ${significantValue}`;\n    }\n\n    return `${significantValue} ${this.asset.ticker}`;\n  }\n\n  totalPriceIn(quoteAsset: AssetEntity, pools: Pool[]) {\n    return new Price({\n      baseAsset: this.asset,\n      quoteAsset,\n      pools,\n      priceAmount: Amount.fromAssetAmount(this.assetAmount, this.decimal),\n    });\n  }\n}\n\nexport const getMinAmountByChain = (chain: Chain) => {\n  const asset = getSignatureAssetFor(chain);\n  const minAmount = [Chain.Bitcoin, Chain.Litecoin, Chain.BitcoinCash].includes(chain)\n    ? // 10001 satoshi\n      10001\n    : [Chain.Doge].includes(chain)\n    ? // 1 DOGE\n      100000001\n    : [Chain.Avalanche, Chain.Ethereum].includes(chain)\n    ? //  10 gwei\n      10 * 10 ** 9\n    : chain === Chain.THORChain\n    ? // 0 RUNE\n      0\n    : 1;\n\n  return new AssetAmount(asset, Amount.fromBaseAmount(minAmount, asset.decimal));\n};\n","import { BaseDecimal } from '@thorswap-lib/types';\n\nimport { Amount } from './amount.js';\nimport { AssetEntity as Asset } from './asset.js';\n\nexport interface PoolDetail {\n  annualPercentageRate: string;\n  asset: string;\n  assetDepth: string;\n  assetPrice: string;\n  assetPriceUSD: string;\n  liquidityUnits: string;\n  loanCollateral: string;\n  poolAPY: string;\n  runeDepth: string;\n  status: string;\n  synthSupply: string;\n  synthUnits: string;\n  units: string;\n  volume24h: string;\n}\n\nexport class Pool {\n  public readonly asset: Asset;\n  public readonly runeDepth: Amount;\n  public readonly assetDepth: Amount;\n  public readonly assetUSDPrice: Amount;\n  public readonly detail: PoolDetail;\n\n  public static fromPoolData(poolDetail: PoolDetail) {\n    const { asset, runeDepth, assetDepth } = poolDetail;\n    const assetObj = Asset.fromAssetString(asset);\n\n    if (assetObj && runeDepth && assetDepth) {\n      const runeAmount = Amount.fromBaseAmount(runeDepth, BaseDecimal.THOR);\n      const assetAmount = Amount.fromBaseAmount(assetDepth, BaseDecimal.THOR);\n\n      return new Pool(assetObj, runeAmount, assetAmount, poolDetail);\n    }\n\n    return null;\n  }\n\n  constructor(asset: Asset, runeDepth: Amount, assetDepth: Amount, detail: PoolDetail) {\n    this.asset = asset;\n    this.runeDepth = runeDepth;\n    this.assetDepth = assetDepth;\n    this.detail = detail;\n\n    this.assetUSDPrice = Amount.fromAssetAmount(detail.assetPriceUSD, BaseDecimal.THOR);\n  }\n\n  get assetPriceInRune() {\n    return this.runeDepth.div(this.assetDepth);\n  }\n\n  get runePriceInAsset() {\n    return this.assetDepth.div(this.runeDepth);\n  }\n}\n"],"names":["c","e","E","g","getAssetType","chain","ticker","isSynth","Chain","BN_FORMAT","Rounding","Rounding2","AmountType","AmountType2","roundingMode","BigNumber","EMPTY_FORMAT","Amount","amount","type","decimal","__publicField","decimalAmount","BaseDecimal","a","b","value","significantDigits","maxDecimals","format","rounding","decimalPlaces","newValue","suffixes","suffixNum","formatBigNumber","bn","getRuneShare","liquidityUnits","poolUnits","runeDepth","getAssetShare","assetDepth","getAsymmetricRuneShare","s","T","A","part1","part2","part3","part4","part5","getAsymmetricAssetShare","numerator","getAsymmetricRuneWithdrawAmount","percent","getAsymmetricAssetWithdrawAmount","getSymmetricWithdraw","getEstimatedPoolShare","runeAmount","assetAmount","R","P","runeAddAmount","assetAddAmount","rA","aR","ra","RA","denominator","liquidityUnitsAfterAdd","estimatedLiquidityUnits","newPoolUnits","getLiquiditySlippage","MemoType","getShortenedSymbol","symbol","getMemoFor","memoType","options","address","unbondAmount","name","owner","singleSide","basisPoints","targetAssetString","target","shortenedSymbol","asset","getNetworkName","getTHORNameCost","year","validateTHORName","regex","_AssetEntity","symbolArray","_a","synthSymbol","getSignatureAssetFor","AssetEntity","urlEncodedAsset","assetString","_c","_b","THOR_MAINNET_SYMBOL","ETH_RUNE_SYMBOL","cachedSignatureAssets","signature","bscAsset","AssetSymbol","thorAsset","ethRune","isGasAsset","poolByAsset","pools","pool","Price","baseAsset","quoteAsset","unitPrice","priceAmount","baseAssetPool","quoteAssetPool","abbreviate","fixedLabel","AssetAmount","isPrefix","significantValue","getMinAmountByChain","minAmount","Pool","detail","poolDetail","assetObj","Asset"],"mappings":"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"}